[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "5027A",
    "section": "",
    "text": "Overview\nThis course will introduce scientists and practitioners interested in applying statistical approaches in their daily routine using R as a working environment. Participants will be introduced into R and R Studio while learning how to perform common statistical analyses. After a short introduction on R and its principles, the focus will be on questions that could be addressed using common statistical analyses, both for descriptive statistics and for statistical inference.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "5027A",
    "section": "0.1 Learning outcomes",
    "text": "0.1 Learning outcomes\n\nUnderstand how to read, interpret and write scripts in R.\nLearn how to check and clean data\nLearn statistical tools to address common questions in research activities.\nAn introduction to efficient, readable and reproducible analyses\nBeing comfortable with using R when performing both descriptive and inferential statistics.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "02-projects.html",
    "href": "02-projects.html",
    "title": "1  Project-oriented workflows",
    "section": "",
    "text": "1.1 Setting up a new project\nYou should start a new R project when you begin working on a distinct task, research project, or analysis. This ensures that your work is well-organized, and it’s especially beneficial when you need to collaborate, share, or revisit the project later.\nTo create and open an R project in RStudio:\nThe new project will be created with a .Rproj file. You can open it by double-clicking on this file or by using the “File” menu in RStudio.\nThis will set up a dedicated workspace for your project, ensuring that the working directory and file paths are appropriately managed.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project-oriented workflows</span>"
    ]
  },
  {
    "objectID": "02-projects.html#setting-up-a-new-project",
    "href": "02-projects.html#setting-up-a-new-project",
    "title": "1  Project-oriented workflows",
    "section": "",
    "text": "Go to “File” in the RStudio menu.\nSelect “New Project…”\nChoose a project type or create a new directory for the project.\nClick “Create Project.”",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project-oriented workflows</span>"
    ]
  },
  {
    "objectID": "02-projects.html#avoiding-setwd-and-promoting-safe-file-paths",
    "href": "02-projects.html#avoiding-setwd-and-promoting-safe-file-paths",
    "title": "1  Project-oriented workflows",
    "section": "\n1.2 Avoiding setwd() and Promoting Safe File Paths:",
    "text": "1.2 Avoiding setwd() and Promoting Safe File Paths:\nTo maintain a clean and efficient workflow in R, it’s advisable to avoid using setwd() at the beginning of each script. This practice promotes the use of safe file paths and is particularly important for projects with multiple collaborators or when working across different computers.\n\n1.2.1 Absolute vs. Relative Paths:\nWhile absolute file paths provide an explicit way to locate resources, they have significant drawbacks, such as incompatibility and reduced reproducibility. Relative file paths, on the other hand, are relative to the current working directory, making them shorter, more portable, and more reproducible.\nAn Absolute file path is a path that contains the entire path to a file or directory starting from your Home directory and ending at the file or directory you wish to access e.g.\n/home/your-username/project/data/penguins_raw.csv\n\nIf you share files, another user won’t have the same directory structure as you, so they will need to recreate the file paths\nIf you alter your directory structure, you’ll need to rewrite the paths\nAn absolute file path will likely be longer than a relative path, more of the backslashes will need to be edited, so there is more scope for error.\n\nA Relative filepath is the path that is relative to the working directory location on your computer.\nWhen you use RStudio Projects, wherever the .Rproj file is located is set to the working directory. This means that if the .Rproj file is located in your project folder then the relative path to your data is:\ndata/penguins_raw.csv\nThis filepath is shorter and it means you could share your project with someone else and the script would run without any editing.\n\n1.2.2 Organizing Projects:\nA key aspect of this workflow is organizing each logical project into a separate folder on your computer. This ensures that files and scripts are well-structured, making it easier to manage your work.\n\n1.2.3 The here Package:\nTo further enhance this organization and ensure that file paths are independent of specific working directories, the here package comes into play. The here() function provided by this package builds file paths relative to the top-level directory of your project.\nmy_project.RProj/\n    |- data/\n    |   |- raw/\n    |       |- penguins_raw.csv\n    |   |- processed/\n    |- scripts/\n    |   |- analysis.R\n    |- results/\n\n\nIn the above project example you have raw data files in the data/raw directory, scripts in the scripts directory, and you want to save processed data in the data/processed directory.\nTo access this data using a relative filepath we need:\n\nraw_data &lt;- read.csv(\"data/raw/penguins_raw.csv\")\n\nTo access this data with here we provide the directories and desired file, and here() builds the required filepath starting at the top level of our project each time\n\nlibrary(here)\n\nraw_data &lt;- read.csv(here(\"data\", \"raw\", \"penguins.csv\"))\n\n\n1.2.3.1 here and Rmarkdown\nOne quirk of working in a .Rmd Rmarkdown file is that when you “knit” all code is compiled with the working directory as the folder that .Rmd file lives in, but if you are working in a script .R or in a live session then the default working directory is the top level of the project file. This frustrating and confusing process can lead to errors when attempting to compile documents.\nBUT if you use the here package then this default behaviour is overridden. The working directory when knitting will be the top-level .Rproj location again!\n\n1.2.4 Reading\nhttps://github.com/jennybc/here_here\nhttps://cran.r-project.org/web/packages/here/index.html",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project-oriented workflows</span>"
    ]
  },
  {
    "objectID": "02-projects.html#blank-slates",
    "href": "02-projects.html#blank-slates",
    "title": "1  Project-oriented workflows",
    "section": "\n1.3 Blank slates",
    "text": "1.3 Blank slates\nWhen working on data analysis and coding projects in R, it’s crucial to ensure that your analysis remains clean, reproducible, and free from hidden dependencies.\nHidden dependencies are elements in your R session that might not be immediately apparent but can significantly impact the reliability and predictability of your work.\nFor example many data analysis scripts start with the command rm(list = ls()). While this command clears user-created objects from the workspace, it leaves hidden dependencies as it does not reset the R session, and can cause issues such as:\n\nHidden Dependencies: Users might unintentionally rely on packages or settings applied in the current session.\nIncomplete Reset: Package attachments made with library() persist, and customized options remain set.\nWorking Directory: The working directory is not affected, potentially causing path-related problems in future scripts.\n\n\n1.3.1 Restart R sessions\nRestarting R sessions and using scripts as your history is a best practice for maintaining a clean, reproducible, and efficient workflow. It addresses the limitations of rm(list = ls()) by ensuring a complete reset and minimizing hidden dependencies, enhancing code organization, and ensuring your analysis remains robust and predictable across sessions and when shared with others.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project-oriented workflows</span>"
    ]
  },
  {
    "objectID": "02-projects.html#export",
    "href": "02-projects.html#export",
    "title": "1  Project-oriented workflows",
    "section": "\n2.1 Export",
    "text": "2.1 Export\nEach of these packages and functions has the inverse “write” function to produce files in a variety of formats from R objects.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project-oriented workflows</span>"
    ]
  },
  {
    "objectID": "02-projects.html#organised-scripts",
    "href": "02-projects.html#organised-scripts",
    "title": "1  Project-oriented workflows",
    "section": "\n3.1 Organised scripts",
    "text": "3.1 Organised scripts\nLoad all necessary packages at the beginning of your script. It’s common to start with basic packages and then add more specialized libraries as your analysis progresses. However, it’s crucial to load all required packages at the beginning of your script. This practice ensures that when you or someone else needs to run the script again, all necessary libraries are readily available, preventing issues in the middle of execution due to unrecognized functions. Small coding details matter.\nName your code sections and use them for quick navigation. As your code grows, it may become extensive and challenging to manage. To keep it organized, divide your code into sections, each with a specific name, which can be folded or unfolded for easy navigation. You can also use the ‘drop-up’ menu at the bottom of the script screen to move between sections.\nTo create a new code section, insert “####” or “—-” at the end of a comment that marks the beginning of a new section.\n\n\n\n\n\n\n\n\nI understand, we all have good intentions, but we often neglect the task of thoroughly commenting our code. I’ve made that promise to myself many times, but even now, I struggle to do it consistently. Why, you ask? Here are a few reasons:\n\nI often tell myself that the analysis itself is more crucial.\nI believe I understand my own code.\nI usually don’t have immediate collaborators who need to use my code.\n\nHowever, these arguments are somewhat shortsighted. The reality is that:\n\nThe most valuable and relevant analysis loses its value if neither you nor others can understand it. (More on this below)\nWhile you may know what you’re doing at the moment, it won’t feel the same way in a month or two when you’ve moved on to another project, and someone innocently asks you about how you defined a critical variable. Our memory is unreliable. It’s important not to rely on it for every piece of code you produce.\nEven if you don’t have active collaborators at the time of your analysis, someone will eventually need to use your code. You won’t be in the same position forever. You’re creating a legacy that, someday, someone will rely on, no matter how distant that day may seem right now.\n\nSo, what makes code good and reproducible?\n\nThoughtful and clear comments.\nCode that is logical and efficient.\nCode that has been appropriately timed and tested.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project-oriented workflows</span>"
    ]
  },
  {
    "objectID": "02-projects.html#use-style-guides",
    "href": "02-projects.html#use-style-guides",
    "title": "1  Project-oriented workflows",
    "section": "\n3.2 Use style guides",
    "text": "3.2 Use style guides\nConsider using a style guide, such as the tidyverse style guide, is a beneficial practice for several reasons:\nConsistency: A style guide enforces consistent code formatting and naming conventions throughout your project. This consistency improves code readability and makes it easier for you and others to understand the code. When you have multiple people working on a project, a shared style guide ensures that everyone’s code looks similar, reducing confusion and errors.\nReadability: Following a style guide leads to more readable code. Code is often read more frequently than it is written, so making it easy to understand is crucial. The tidyverse style guide, for example, emphasizes clear and self-explanatory code, improving comprehension for both current and future users. Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread\nCollaboration: When working with a team, adhering to a common style guide makes it easier to collaborate. It reduces the friction associated with different team members using varying coding styles and preferences. This streamlines code reviews and simplifies the process of maintaining and extending the codebase.\nError Reduction: A style guide can help identify and prevent common coding errors. It promotes best practices and can include guidelines for avoiding pitfalls and potential issues. This reduces the likelihood of bugs and enhances the overall quality of the code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project-oriented workflows</span>"
    ]
  },
  {
    "objectID": "02-projects.html#separate-your-scripts",
    "href": "02-projects.html#separate-your-scripts",
    "title": "1  Project-oriented workflows",
    "section": "\n3.3 Separate your scripts",
    "text": "3.3 Separate your scripts\nSeparating your analysis into distinct scripts for different steps is a sound practice in data analysis. Each script can focus on a specific task or step, making your work more organized and understandable.\nYou can use the source() function in R to run previous dependencies, ensuring that you can reproduce your work easily. Additionally, for computationally intensive processes or when dealing with large datasets, you can save and load intermediate results in RDS format. This approach not only conserves memory but also saves time when re-running your analysis.\nproject_folder/\n│\n├── data/\n│   ├── data.csv\n│   ├── processed_data.rds\n│\n├── scripts/\n│   ├── data_preparation.R\n│   ├── data_analysis.R\n│   ├── visualization.R\n│   ├── helper_functions.R\n│\n├── output/\n│   ├── result.csv\n│\n├── README.md\n│\n├── project.Rproj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project-oriented workflows</span>"
    ]
  },
  {
    "objectID": "02-projects.html#activity",
    "href": "02-projects.html#activity",
    "title": "1  Project-oriented workflows",
    "section": "\n3.4 Activity",
    "text": "3.4 Activity\nUsing the Tidyverse style guide for help, how could you improve the layout and readability of this script?\n\n# Install and load necessary packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\npenguins_clean &lt;- janitor::clean_names(penguins_raw)\n\n\n## Data is selected by species, island, culmen length and depth and flipper, then NAs are dropped and a new column is made of length/depth and the mean is summaries for flipper length and length/depth ratio\npenguins_clean |&gt; select(species, island, culmen_length_mm, culmen_depth_mm, flipper_length_mm)  |&gt; drop_na(culmen_length_mm, culmen_depth_mm, flipper_length_mm) |&gt; mutate(culmen_ratio = culmen_length_mm / culmen_depth_mm) |&gt; group_by(species, island) |&gt; summarise(mean_flipper_length = mean(flipper_length_mm), mean_culmen_ratio = mean(culmen_ratio)) |&gt; arrange(species, island) -&gt; penguins_culmen_ratio\n\n## View summary table\nprint(penguins_culmen_ratio)\n\n\n### Data visualization \npenguins_clean |&gt;\n  ggplot(aes(x = culmen_length_mm, y = culmen_depth_mm, color = species)) +\n          geom_point() +\n                labs(x = \"Culmen Length (mm)\", y = \"Culmen Depth (mm)\") +\n                      theme_minimal()\n\n\n\nCheck your script\n\n\n# Packages ----\n# Install and load necessary packages\nlibrary(tidyverse)\nlibrary(janitor)\n# Loads the penguins dataset\nlibrary(palmerpenguins)\n\n\n# Clean the data ----\npenguins_raw &lt;- janitor::clean_names(penguins_raw)\n\n# Analysis----\n# Data exploration and manipulation to make culmen ratio\npenguins_culmen_ratio &lt;- penguins_raw |&gt; \n  select(species, island, \n         culmen_length_mm, \n         culmen_depth_mm, \n         flipper_length_mm)  |&gt; \n  drop_na(culmen_length_mm, \n          culmen_depth_mm, \n          flipper_length_mm) |&gt; \n  mutate(culmen_ratio = culmen_length_mm / culmen_depth_mm) |&gt;\n  group_by(species, island) |&gt;\n  summarise(mean_flipper_length = mean(flipper_length_mm), \n            mean_culmen_ratio = mean(culmen_ratio)) |&gt;\n  arrange(species, island)\n\n# View summary table\nprint(penguins_culmen_ratio)\n\n# Plots----\n# Data visualization using ggplot2\npenguins_clean |&gt;\n  ggplot(aes(x = culmen_length_mm, \n             y = culmen_depth_mm, \n             color = species)) +\n  geom_point() +\n  labs(x = \"Culmen Length (mm)\", \n       y = \"Culmen Depth (mm)\") +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project-oriented workflows</span>"
    ]
  },
  {
    "objectID": "instructions.html",
    "href": "instructions.html",
    "title": "2  How to Use this Book",
    "section": "",
    "text": "2.1 Setup",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>How to Use this Book</span>"
    ]
  },
  {
    "objectID": "instructions.html#sec-setup",
    "href": "instructions.html#sec-setup",
    "title": "2  How to Use this Book",
    "section": "",
    "text": "2.1.1 Install booktem\n# install.packages(\"devtools\")\ndevtools::install_github(\"debruine/booktem\")\n\n2.1.2 Quarto Options\nThe file _quarto.yml contains various options that you can set to change the format and look of your book.\n\n2.1.2.1 Language Options\nThere is some default text for things like the “authors” list and “table of contents” that might need translations. Set the lang key to the 2-letter language code for your language.\nYou can make a custom translation by translating the values in the include/_language.yml file.\nlang: en\n# language: include/_language.yml\n\n2.1.2.2 Project Options\nThe project key defines the inputs and outputs for the book (quarto reference).\n\n\n\n\n\n\nproject key\n\n\n\n\n\nproject:\n  type: book\n  output-dir: docs\n  resources: resources \n\n\n\nThe output-dir key defines the directory where the rendered web files will be saved. This is set to docs in order to be compatible with GitHub Pages, but you can change this if you are working with a different repository that expects the web files to be in a different directory.\nThe resources key specifies a directory that is copied verbatim to the output directory. This is where you should put, for example, data files that you want to make accessible online (sometimes they don’t automatically copy over when linked).\n\n2.1.2.3 Book Options\nThe book key defines options that affect the look and function of the book (quarto reference).\n\n\n\n\n\n\nbook key\n\n\n\n\n\nbook:\n  title: Book\n  subtitle: ~\n  author: ~\n  doi: ~\n  license: CC-BY 4.0\n  description: ~\n  cover-image: images/logos/logo.png\n  image: images/logos/logo.png\n  favicon: images/logos/logo.png\n  cookie-consent: false\n  google-analytics: ~\n  page-navigation: true\n  search: true\n  # comments:\n  #   hypothesis:\n  #     theme: clean\n  #     openSidebar: false\n  downloads: ~\n  sharing: ~\n  sidebar:\n    title: ~\n    logo: ~\n    search: true\n    contents: ~\n    style: floating\n    background: ~\n    foreground: ~\n    border: true\n    alignment: left\n    collapse-level: 3\n    pinned: true\n    header: \"\"\n    footer: \"\"\n  margin-header: ~\n  page-footer:\n    left: ~\n    right: ~\n  chapters:\n  - index.qmd\n  - instructions.qmd\n  appendices:\n  - references.qmd\n\n\n\n\n2.1.2.4 html Options\nThe format key defines options for specific formats, such as html or pdf. We’ll only be using html here (quarto reference).\n\n\n\n\n\n\nformat:html key\n\n\n\n\n\nformat:\n  html:\n    theme:\n      light:\n      - flatly\n      - include/light.scss\n      dark:\n      - darkly\n      - include/dark.scss\n    css:\n    - https://use.fontawesome.com/releases/v5.13.0/css/all.css\n    - include/booktem.css\n    - include/glossary.css\n    - include/style.css\n    df-print: kable\n    code-link: true\n    code-fold: false\n    code-line-numbers: true\n    code-overflow: wrap\n    code-copy: hover\n    highlight-style: a11y\n    mainfont: ~\n    monofont: ~\n    include-after-body: [include/script.js]\n\n\n\n\n2.1.3 Crossrefs\nSection links must start with sec- and look like this: Section 2.1.5.\n## Section Title {#sec-section-title}\n\nInternal links look like this: @sec-section-title\nFigure links must start with fig- and look like this: Figure 2.1.\n\n\n\n\n\n\n\nFigure 2.1: A histogram of a Poisson distribution with lambda = 3\n\n\n\n\nTable links must start with tbl- and look like this: Table 2.1.\n\n\n\nTable 2.1: The authors of this book\n\n\n\n\n\nfirst_name\nlast_name\n\n\n\nLisa\nDeBruine\n\n\nDaniël\nLakens\n\n\n\n\n\n\n\n\n\nSee the quarto documentation for more information.\n\n2.1.4 References\nZotero export - keep updated\n\n2.1.5 Snippets\nSnippets in RStudio provide shortcuts to syntax. For example, in an RMarkdown document, type “r” and shift-tab to expand a code chunk.\nYou can add your own snippets. Under the Tools menu, choose Edit Code Snippets... and paste the following text into the end of the appropriate sections.\n\n2.1.5.1 Markdown\nsnippet gls\n    r glossary(\"${1:term}\")\n    \nsnippet gls2\n    r glossary(\"${1:term}\", \"${2:display}\")\n    \nsnippet h1\n    # ${1:title} {#sec-${2:ref}}\n    \nsnippet h2\n    ## ${1:title} {#sec-${2:ref}}\n    \nsnippet h3\n    ### ${1:title} {#sec-${2:ref}}\n    \nsnippet h4\n    #### ${1:title} {#sec-${2:ref}}\n    \nsnippet h5\n    ##### ${1:title} {#sec-${2:ref}}\n\n2.1.6 Customize\n\n2.1.6.1 Page Footer\nThe default footer includes license YEAR, author, and github and twitter icons, but you can customize this in the _quarto.yml file under page-footer:. See the quarto documentation for more options. See the available icons at https://icons.getbootstrap.com/.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>How to Use this Book</span>"
    ]
  },
  {
    "objectID": "instructions.html#sec-layout",
    "href": "instructions.html#sec-layout",
    "title": "2  How to Use this Book",
    "section": "\n2.2 Layout",
    "text": "2.2 Layout\n\n2.2.1 Conventions\nThis book will use the following conventions:\n\nCode: list(number = 1, letter = \"A\")\n\nFile paths: data/sales.csv\n\nMenu/interface options: Tools &gt; Global Options… &gt; Pane Layout\n\nR Packages: tidyverse\n\nGlossary items: alphaThe threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\n\nCitations: Wickham et al. (2022)\n\nInternal links: Section 2.2.1\n\nExternal links: Mastering Shiny\n\nMac-specific: Cmd-Shift-F10\n\nWindows-specific: Ctl-Shift-F10\n\n\nA list of mac and windows keyboard shortcuts.\n\n2.2.2 Figures\nIt is best practice to set a custom ggplot theme, then each subsequent plot will use that theme. You can put this code in R/my_setup.R after loading ggplot2.\nStart with a built-in theme and then add any tweaks with the theme() function.\n\nlibrary(ggplot2)\n\n\nmy_theme &lt;- theme_minimal(base_size = 16) + \n  theme(\n    panel.grid = element_blank(),  # Removes gridlines\n    axis.line = element_line(color = \"black\")  # Adds x and y axis lines\n  )\n\ntheme_set(my_theme)\n\n\nggplot(midwest, aes(popdensity, percollege)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Population Density\", y = \"Percent College Educated\")\n\n\n\n\n\n\nFigure 2.2: Demographic information of midwest counties from 2000 US census\n\n\n\n\n\n2.2.3 Tables\n\nhead(beaver1)\n\n\n\nBeavers\n\nday\ntime\ntemp\nactiv\n\n\n\n346\n840\n36.33\n0\n\n\n346\n850\n36.34\n0\n\n\n346\n900\n36.35\n0\n\n\n346\n910\n36.42\n0\n\n\n346\n920\n36.55\n0\n\n\n346\n930\n36.69\n0\n\n\n\n\n\n\n\n2.2.4 Callout boxes\nSee the quarto reference for more options.]{.aside}\n\n\n\n\n\n\nNote\n\n\n\n.callout-note: Informational asides.\n\n\n\n\n\n\n\n\nClick to expand\n\n\n\n\n\ncolapse = “true”: Expanded!\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n.callout-tip: Tips\n\n\n\n\n\n\n\n\nWarning\n\n\n\n.callout-warning: Notes to warn you about something.\n\n\n\n\n\n\n\n\nCaution\n\n\n\n.callout-caution: Notes about things that could cause serious errors.\n\n\n\n\n\n\n\n\nImportant\n\n\n\n.callout-important: Notes about things that are important.\n\n\n\n2.2.5 Code and Output\n\n# code chunks\npaste(\"Code\", \"Output\", 1, sep = \" \")\n\n[1] \"Code Output 1\"\n\n\n\n\n\nFilename or header\n\n# code chunks with filename\na &lt;- 1\n\n\n\n\n```{r, fig.width = 2, fig.height = 2}\n# code chunks with visible headers\nhist(rnorm(100000))\n```\n\n\n## Markdown Example\n\n* Inline code: `r nrow(iris)`\n* *Italics*\n* **Bold**\n* [Linked text](https://psyteachr.github.io)\n\n2.2.6 Fonts",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>How to Use this Book</span>"
    ]
  },
  {
    "objectID": "instructions.html#sec-extras",
    "href": "instructions.html#sec-extras",
    "title": "2  How to Use this Book",
    "section": "\n2.3 Extras",
    "text": "2.3 Extras\n\n2.3.1 Glossary\nBooks are set up with lightweight glossary functions from the glossary package.\n\n# code in R/my_setup.R to initialise the glossary on each page\nlibrary(glossary)\nglossary_path(\"include/glossary.yml\")\nglossary_popup(\"click\") # \"click\", \"hover\" or \"none\"\n\nEdit the file glossary.yml with your glossary terms like this:\nalpha: |\n  The threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\np-value: |\n  The probability of the observed data, or more extreme data, if the null hypothesis is true. The lower the p-value, the higher the test statistic, and less likely it is to observe the data if the null hypothesis is true.\nLook up a term from the glossary file with glossary(\"alpha\"): alphaThe threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\nDisplay a different value for the term with glossary(\"alpha\", \"$\\\\alpha$\"): \\(\\alpha\\)The threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\nUse an inline definition instead of the glossary file with glossary(\"beta\", def = \"The second letter of the Greek alphabet\"): betaThe second letter of the Greek alphabet\nJust show the definition with glossary(\"p-value\", show = \"def\"): The probability of the observed data, or more extreme data, if the null hypothesis is true. The lower the p-value, the higher the test statistic, and less likely it is to observe the data if the null hypothesis is true.\nShow the table of terms defined on this page with glossary_table():\n\n\n\n\nterm\ndefinition\n\n\n\nalpha\nThe threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\n\n\nbeta\nThe second letter of the Greek alphabet\n\n\np-value\nThe probability of the observed data, or more extreme data, if the null hypothesis is true. The lower the p-value, the higher the test statistic, and less likely it is to observe the data if the null hypothesis is true.\n\n\n\n\n\n\n2.3.2 FontAwesome\nThe fontAwesome quarto extension allows you to use the free icons with syntax like:\n\n\nTo install it, just run this code in the Terminal pane of RStudio (not the Console pane).\nquarto install extension quarto-ext/fontawesome\n\n\n\n\nWickham, H., Bryan, J., & Barrett, M. (2022). Usethis: Automate package and project setup. https://CRAN.R-project.org/package=usethis",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>How to Use this Book</span>"
    ]
  },
  {
    "objectID": "webexercises.html",
    "href": "webexercises.html",
    "title": "Appendix A — Webexercises",
    "section": "",
    "text": "A.1 Example Questions",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Webexercises</span>"
    ]
  },
  {
    "objectID": "webexercises.html#example-questions",
    "href": "webexercises.html#example-questions",
    "title": "Appendix A — Webexercises",
    "section": "",
    "text": "A.1.1 Fill-In-The-Blanks (fitb())\nCreate fill-in-the-blank questions using fitb(), providing the answer as the first argument.\n\n2 + 2 is \n\n\nYou can also create these questions dynamically, using variables from your R session.\n\nThe square root of 36 is: \n\n\nThe blanks are case-sensitive; if you don’t care about case, use the argument ignore_case = TRUE.\n\nWhat is the letter after D? \n\n\nIf you want to ignore differences in whitespace use, use the argument ignore_ws = TRUE (which is the default) and include spaces in your answer anywhere they could be acceptable.\n\nHow do you load the tidyverse package? \n\n\nYou can set more than one possible correct answer by setting the answers as a vector.\n\nType a vowel: \n\n\nYou can use regular expressions to test answers against more complex rules.\n\nType any 3 letters: \n\n\nA.1.2 Multiple Choice (mcq())\n\n“Never gonna give you up, never gonna: \nlet you go\nturn you down\nrun away\nlet you down”\n“I \nbless the rains\nguess it rains\nsense the rain down in Africa” -Toto\n\nA.1.3 True or False (torf())\n\nTrue or False? You can permute values in a vector using sample(). \nTRUE\nFALSE\n\n\nA.1.4 Longer MCQs (longmcq())\nWhen your answers are very long, sometimes a drop-down select box gets formatted oddly. You can use longmcq() to deal with this. Since the answers are long, It’s probably best to set up the options inside an R chunk with echo=FALSE.\nWhat is a p-value?\n\nthe probability that the null hypothesis is truethe probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is truethe probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\nif you repeated the process many times, 95% of intervals calculated in this way contain the true meanthere is a 95% probability that the true mean lies within this range95% of the data fall within this range",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Webexercises</span>"
    ]
  },
  {
    "objectID": "webexercises.html#checked-sections",
    "href": "webexercises.html#checked-sections",
    "title": "Appendix A — Webexercises",
    "section": "\nA.2 Checked sections",
    "text": "A.2 Checked sections\nCreate sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: \nTRUE\nFALSE\n\nWhat is a p-value?\n\nthe probability that the null hypothesis is truethe probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is truethe probability of making an error in your conclusion",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Webexercises</span>"
    ]
  },
  {
    "objectID": "webexercises.html#hidden-solutions-and-hints",
    "href": "webexercises.html#hidden-solutions-and-hints",
    "title": "Appendix A — Webexercises",
    "section": "\nA.3 Hidden solutions and hints",
    "text": "A.3 Hidden solutions and hints\nYou can fence off a solution area that will be hidden behind a button using hide() before the solution and unhide() after, each as inline R code. Pass the text you want to appear on the button to the hide() function.\nIf the solution is a code chunk, instead of using hide() and unhide(), simply set the webex.hide chunk option to TRUE, or set it to the string you wish to display on the button.\nRecreate the scatterplot below, using the built-in cars dataset.\n\n\n\n\n\n\n\n\n\n\nI need a hint\n\nSee the documentation for plot() (?plot)\n\n\n\n\n\nClick here to see the solution\n\nplot(cars$speed, cars$dist)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Webexercises</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Wickham, H., Bryan, J., & Barrett, M. (2022). Usethis: Automate\npackage and project setup. https://CRAN.R-project.org/package=usethis",
    "crumbs": [
      "Appendices",
      "References"
    ]
  }
]