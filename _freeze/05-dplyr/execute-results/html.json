{
  "hash": "1a4a6fd6350287b17eeb2fa7a4faa36a",
  "result": {
    "engine": "knitr",
    "markdown": "# Data cleaning {#sec-dplyr}\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\nIn this chapter you will learn how to use tidyverse functions to data clean and wrangle <a class='glossary'>tidy data<span class='def'>Tidy data refers to a specific format for organizing datasets that makes data easier to work with for analysis and visualization in R, especially using the tidyverse. The concept was popularized by Hadley Wickham in his paper “Tidy Data” and is an essential principle for effective data manipulation.</span></a> introduced in @sec-tidy \n\n## Introduction to dplyr\n\nIn this section we will be introduced to some of the most commonly used data wrangling functions, these come from the `dplyr` package (part of the `tidyverse`). These are functions you are likely to become *very* familiar with. \n\n::: {.callout-tip}\n\nTry running the following functions directly in your <a class='glossary'>console<span class='def'>The R console is the interactive interface within the R environment where users can type and execute R code. It is the place where you can directly enter commands, see their output, and interact with the R programming language in real-time.</span></a> *or* make a `scraps.R` scrappy file to mess around in. \n\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|verb        |action                                    |\n|:-----------|:-----------------------------------------|\n|select()    |choose columns by name                    |\n|filter()    |select rows based on conditions           |\n|arrange()   |reorder the rows                          |\n|summarise() |reduce raw data to user defined summaries |\n|group_by()  |group the rows by a specified column      |\n|mutate()    |create a new variable                     |\n\n</div>\n:::\n:::\n\n\n\n\n### Select\n\nIf we wanted to create a dataset that only includes certain variables, we can use the `dplyr::select()` function from the `dplyr` package. \n\nFor example I might wish to create a simplified dataset that only contains `species`, `sex`, `flipper_length_mm` and `body_mass_g`. \n\nRun the below code to select only those columns\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(\n   # the data object\n  .data = penguins_raw,\n   # the variables you want to select\n  `Species`, `Sex`, `Flipper Length (mm)`, `Body Mass (g)`)\n```\n:::\n\n\n\n\n\n\nAlternatively you could tell R the columns you **don't** want e.g. \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(.data = penguins_raw,\n       -`studyName`, -`Sample Number`)\n```\n:::\n\n\n\n\nNote that `select()` does **not** change the original `penguins` tibble. It spits out the new tibble directly into your console. \n\nIf you don't **save** this new tibble, it won't be stored. If you want to keep it, then you must create a new object. \n\nWhen you run this new code, you will not see anything in your console, but you will see a new object appear in your Environment pane.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnew_penguins <- select(.data = penguins_raw, \n       `Species, `Sex`, `Flipper Length (mm)`, `Body Mass (g)`)\n```\n:::\n\n\n\n\n### Filter\n\nHaving previously used `dplyr::select()` to select certain variables, we will now use `dplyr::filter()` to select only certain rows or observations. For example only Adelie penguins. \n\nWe can do this with the equivalence operator `==`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(.data = new_penguins, \n       `Species` == \"Adelie Penguin (Pygoscelis adeliae)\")\n```\n:::\n\n\n\n\nWe can use several different operators to assess the way in which we should filter our data that work the same in tidyverse or base R.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 16px; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Boolean expressions</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Operator </th>\n   <th style=\"text-align:left;\"> Name </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> A &lt; B </td>\n   <td style=\"text-align:left;\"> less than </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> A &lt;= B </td>\n   <td style=\"text-align:left;\"> less than or equal to </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> A &gt; B </td>\n   <td style=\"text-align:left;\"> greater than </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> A &gt;= B </td>\n   <td style=\"text-align:left;\"> greater than or equal to </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> A == B </td>\n   <td style=\"text-align:left;\"> equivalence </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> A != B </td>\n   <td style=\"text-align:left;\"> not equal </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> A %in% B </td>\n   <td style=\"text-align:left;\"> in </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\nIf you wanted to select all the Penguin species except Adelies, you use 'not equals'.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(.data = new_penguins, \n       `Species` != \"Adelie Penguin (Pygoscelis adeliae)\")\n```\n:::\n\n\n\n\nThis is the same as \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(.data = new_penguins, \n       `Species` %in% c(\"Chinstrap penguin (Pygoscelis antarctica)\",\n                      \"Gentoo penguin (Pygoscelis papua)\")\n       )\n```\n:::\n\n\n\n\nYou can include multiple expressions within `filter()` and it will pull out only those rows that evaluate to `TRUE` for all of your conditions. \n\nFor example the below code will pull out only those observations of Adelie penguins where flipper length was measured as greater than 190mm. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(.data = new_penguins, \n       `Species` == \"Adelie Penguin (Pygoscelis adeliae)\", \n       `Flipper Length (mm)` > 190)\n```\n:::\n\n\n\n\n### Arrange\n\nThe function `arrange()` sorts the rows in the table according to the columns supplied. For example\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narrange(.data = new_penguins, \n        `Sex`)\n```\n:::\n\n\n\n\n\n\nThe data is now arranged in alphabetical order by sex. So all of the observations of female penguins are listed before males. \n\nYou can also reverse this with `desc()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narrange(.data = new_penguins, \n        desc(`Sex`))\n```\n:::\n\n\n\n\nYou can also sort by more than one column, what do you think the code below does?\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narrange(.data = new_penguins,\n        `Sex`,\n        desc(`Species`),\n        desc(`Flipper Length (mm)`))\n```\n:::\n\n\n\n\n### Mutate\n\nSometimes we need to create a new variable that doesn't exist in our dataset. For example we might want to figure out what the flipper length is when factoring in body mass. \n\nTo create new variables we use the function `mutate()`. \n\nNote that as before, if you want to save your new column you must save it as an object. Here we are mutating a new column and attaching it to the `new_penguins` data oject.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnew_penguins <- mutate(.data = new_penguins,\n                     body_mass_kg = `Body Mass (g)`/1000)\n```\n:::\n\n\n\n\n## Pipes\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/pipe_order.jpg){fig-align='center' fig-alt='Pipes make code more human readable' width=80%}\n:::\n:::\n\n\n\n\nPipes look like this: `|>` , a <a class='glossary'>pipe<span class='def'>An operator that allows you to chain multiple functions together in a sequence</span></a> allows you to send the output from one function straight into another function. Specifically, they send the result of the function before `|>` to be the **first** argument of the function after `|>`. As usual, it's easier to show, rather than tell so let's look at an example.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# this example uses brackets to nest and order functions\narrange(.data = filter(\n  .data = select(\n  .data = penguins_raw, \n  species, `Sex`, `Flipper Length (mm)`), \n  `Sex` == \"MALE\"), \n  desc(`Flipper Length (mm)`))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# this example uses sequential R objects \nobject_1 <- select(.data = penguins_raw, \n                   `Species`, `Sex`, `Flipper Length (mm)`)\nobject_2 <- filter(.data = object_1, \n                   `Sex` == \"MALE\")\narrange(object_2, \n        desc(`Flipper Length (mm)`))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# this example is human readable without intermediate objects\npenguins_raw |>  \n  select(`Species`, `Sex`, `Flipper Length (mm)`) |>  \n  filter(`Sex` == \"MALE\") |>  \n  arrange(`Flipper Length (mm)`))\n```\n:::\n\n\n\n\nThe reason that this function is called a pipe is because it 'pipes' the data through to the next function. When you wrote the code previously, the first argument of each function was the dataset you wanted to work on. When you use pipes it will automatically take the data from the previous line of code so you don't need to specify it again.\n\n### Task\n\nTry and write out as plain English what the |>  above is doing? You can read the |>  as THEN\n\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\nTake the penguins data AND THEN\nSelect only the species, sex and flipper length columns AND THEN\nFilter to keep only those observations labelled as sex equals male AND THEN\nArrange the data from HIGHEST to LOWEST flipper lengths.\n\n\n</div>\n\n\n\n\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>From R version 4 onwards there is now a “native pipe”\n<code>|&gt;</code></p>\n<p>This doesn’t require the tidyverse <code>magrittr</code> package and\nthe “old pipe” <code>%&gt;%</code> or any other packages to load and\nuse.</p>\n<p>You may be familiar with the magrittr pipe or see it in other\ntutorials, and website usages. The native pipe works equivalntly in most\nsituations but if you want to read about some of the operational\ndifferences, <a\nhref=\"https://www.infoworld.com/article/3621369/use-the-new-r-pipe-built-into-r-41.html\">this\nsite</a> does a good job of explaining .</p>\n</div>\n:::\n\n\n\n\n\n## Clean the Penguin Data\n\n::: {.callout-warning}\n\nRe-open your `01_import_penguins_data.R` started in @sec-penguins and start to add these commands to your data importing and cleaning script:\n\n:::\n\n### Activity 1: Explore data structure\n\nBefore working with your data, it's essential to understand its underlying structure and content. In this section, we'll use powerful functions like `glimpse()`, `str()`, `summary()`, `head`()`, `tail()` and the add-on function `skimr::skim()` to thoroughly examine your dataset. These tools provide insights into data types, variable distributions, and sample records, helping you identify initial issues such as missing values or inconsistent data types. By gaining a clear understanding of your data's structure, you'll be better equipped to address any problems and proceed confidently with data cleaning and analysis.\n\nWhen we run `glimpse()` we get several lines of output. The number of observations \"rows\", the number of variables \"columns\". Check this against the csv file you have - they should be the same. In the next lines we see variable names and the type of data. \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(penguins_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 17\n$ studyName             <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL…\n$ `Sample Number`       <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ Species               <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie P…\n$ Region                <chr> \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\"…\n$ Island                <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgerse…\n$ Stage                 <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adu…\n$ `Individual ID`       <chr> \"N1A1\", \"N1A2\", \"N2A1\", \"N2A2\", \"N3A1\", \"N3A2\", …\n$ `Clutch Completion`   <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n$ `Date Egg`            <chr> \"11/11/2007\", \"11/11/2007\", \"16/11/2007\", \"16/11…\n$ `Culmen Length (mm)`  <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34…\n$ `Culmen Depth (mm)`   <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18…\n$ `Flipper Length (mm)` <dbl> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190,…\n$ `Body Mass (g)`       <dbl> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 34…\n$ Sex                   <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\"…\n$ `Delta 15 N (o/oo)`   <dbl> NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18…\n$ `Delta 13 C (o/oo)`   <dbl> NA, -24.69454, -25.33302, NA, -25.32426, -25.298…\n$ Comments              <chr> \"Not enough blood for isotopes.\", NA, NA, \"Adult…\n```\n\n\n:::\n:::\n\n\n\n\nWe can see a dataset with 345 rows (including the headers) and 17 variables\nIt also provides information on the *type* of data in each column\n\n* `<chr>` - means character or text data\n\n* `<dbl>` - means numerical data\n\n\nWhen we run `summary()` we get similar information, in addition for any numerical values we get summary statistics such as mean, median, min, max, quartile ranges and any missing (`NA`) values\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(penguins_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studyName         Sample Number      Species             Region         \n Length:344         Min.   :  1.00   Length:344         Length:344        \n Class :character   1st Qu.: 29.00   Class :character   Class :character  \n Mode  :character   Median : 58.00   Mode  :character   Mode  :character  \n                    Mean   : 63.15                                        \n                    3rd Qu.: 95.25                                        \n                    Max.   :152.00                                        \n                                                                          \n    Island             Stage           Individual ID      Clutch Completion \n Length:344         Length:344         Length:344         Length:344        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   Date Egg         Culmen Length (mm) Culmen Depth (mm) Flipper Length (mm)\n Length:344         Min.   :32.10      Min.   :13.10     Min.   :172.0      \n Class :character   1st Qu.:39.23      1st Qu.:15.60     1st Qu.:190.0      \n Mode  :character   Median :44.45      Median :17.30     Median :197.0      \n                    Mean   :43.92      Mean   :17.15     Mean   :200.9      \n                    3rd Qu.:48.50      3rd Qu.:18.70     3rd Qu.:213.0      \n                    Max.   :59.60      Max.   :21.50     Max.   :231.0      \n                    NA's   :2          NA's   :2         NA's   :2          \n Body Mass (g)      Sex            Delta 15 N (o/oo) Delta 13 C (o/oo)\n Min.   :2700   Length:344         Min.   : 7.632    Min.   :-27.02   \n 1st Qu.:3550   Class :character   1st Qu.: 8.300    1st Qu.:-26.32   \n Median :4050   Mode  :character   Median : 8.652    Median :-25.83   \n Mean   :4202                      Mean   : 8.733    Mean   :-25.69   \n 3rd Qu.:4750                      3rd Qu.: 9.172    3rd Qu.:-25.06   \n Max.   :6300                      Max.   :10.025    Max.   :-23.79   \n NA's   :2                         NA's   :14        NA's   :13       \n   Comments        \n Length:344        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n```\n\n\n:::\n:::\n\n\n\n\nFinally the add-on package `skimr` provides the function `skimr::skim()` provides an easy to view set of summaries including column types, completion rate, number of unique variables in each column and similar statistical summaries along with a small histogram for each numeric variable. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(skimr)\nskim(penguins_raw)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |             |\n|:------------------------|:------------|\n|Name                     |penguins_raw |\n|Number of rows           |344          |\n|Number of columns        |17           |\n|_______________________  |             |\n|Column type frequency:   |             |\n|character                |10           |\n|numeric                  |7            |\n|________________________ |             |\n|Group variables          |None         |\n\n\n**Variable type: character**\n\n|skim_variable     | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-----------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|studyName         |         0|          1.00|   7|   7|     0|        3|          0|\n|Species           |         0|          1.00|  33|  41|     0|        3|          0|\n|Region            |         0|          1.00|   6|   6|     0|        1|          0|\n|Island            |         0|          1.00|   5|   9|     0|        3|          0|\n|Stage             |         0|          1.00|  18|  18|     0|        1|          0|\n|Individual ID     |         0|          1.00|   4|   6|     0|      190|          0|\n|Clutch Completion |         0|          1.00|   2|   3|     0|        2|          0|\n|Date Egg          |         0|          1.00|  10|  10|     0|       50|          0|\n|Sex               |        11|          0.97|   4|   6|     0|        2|          0|\n|Comments          |       290|          0.16|  18|  68|     0|       10|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable       | n_missing| complete_rate|    mean|     sd|      p0|     p25|     p50|     p75|    p100|hist  |\n|:-------------------|---------:|-------------:|-------:|------:|-------:|-------:|-------:|-------:|-------:|:-----|\n|Sample Number       |         0|          1.00|   63.15|  40.43|    1.00|   29.00|   58.00|   95.25|  152.00|▇▇▆▅▃ |\n|Culmen Length (mm)  |         2|          0.99|   43.92|   5.46|   32.10|   39.23|   44.45|   48.50|   59.60|▃▇▇▆▁ |\n|Culmen Depth (mm)   |         2|          0.99|   17.15|   1.97|   13.10|   15.60|   17.30|   18.70|   21.50|▅▅▇▇▂ |\n|Flipper Length (mm) |         2|          0.99|  200.92|  14.06|  172.00|  190.00|  197.00|  213.00|  231.00|▂▇▃▅▂ |\n|Body Mass (g)       |         2|          0.99| 4201.75| 801.95| 2700.00| 3550.00| 4050.00| 4750.00| 6300.00|▃▇▆▃▂ |\n|Delta 15 N (o/oo)   |        14|          0.96|    8.73|   0.55|    7.63|    8.30|    8.65|    9.17|   10.03|▃▇▆▅▂ |\n|Delta 13 C (o/oo)   |        13|          0.96|  -25.69|   0.79|  -27.02|  -26.32|  -25.83|  -25.06|  -23.79|▆▇▅▅▂ |\n\n\n:::\n:::\n\n\n\n\n\n**Q Based on our summary functions are any variables assigned to the wrong data type (should be character when numeric or vice versa)?**\n\n<select class='webex-select'><option value='blank'></option><option value=''>Yes</option><option value='answer'>No</option></select>\n\n\n\n<div class='webex-solution'><button>Explanation</button>\n\n\nAlthough some columns like date might not be correctly treated as character variables, they are not strictly numeric either, all other columns appear correct\n\n\n</div>\n\n\n\n**Q Based on our summary functions do we have complete data for all variables?**\n\n<select class='webex-select'><option value='blank'></option><option value=''>Yes</option><option value='answer'>No</option></select>\n\n\n\n<div class='webex-solution'><button>Explanation</button>\n\n\nNo, they are 2 missing data points for body measurements (culmen, flipper, body mass), 11 missing data points for sex, 13/14 missing data points for blood isotopes (Delta N/C) and 290 missing data points for comments\n\n\n</div>\n\n\n\n### Activity 2: Clean column names\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# CHECK DATA----\n# check the data\ncolnames(penguins_raw)\n#__________________________----\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"studyName\"           \"Sample Number\"       \"Species\"            \n [4] \"Region\"              \"Island\"              \"Stage\"              \n [7] \"Individual ID\"       \"Clutch Completion\"   \"Date Egg\"           \n[10] \"Culmen Length (mm)\"  \"Culmen Depth (mm)\"   \"Flipper Length (mm)\"\n[13] \"Body Mass (g)\"       \"Sex\"                 \"Delta 15 N (o/oo)\"  \n[16] \"Delta 13 C (o/oo)\"   \"Comments\"           \n```\n\n\n:::\n:::\n\n\n\n\nWhen we run `colnames()` we get the identities of each column in our dataframe\n\n* **Study name**: an identifier for the year in which sets of observations were made\n\n* **Region**: the area in which the observation was recorded\n\n* **Island**: the specific island where the observation was recorded\n\n* **Stage**: Denotes reproductive stage of the penguin\n\n* **Individual** ID: the unique ID of the individual\n\n* **Clutch completion**: if the study nest observed with a full clutch e.g. 2 eggs\n\n* **Date egg**: the date at which the study nest observed with 1 egg\n\n* **Culmen length**: length of the dorsal ridge of the bird's bill (mm)\n\n* **Culmen depth**: depth of the dorsal ridge of the bird's bill (mm)\n\n* **Flipper Length**: length of bird's flipper (mm)\n\n* **Body Mass**: Bird's mass in (g)\n\n* **Sex**: Denotes the sex of the bird\n\n* **Delta 15N** : the ratio of stable Nitrogen isotopes 15N:14N from blood sample\n\n* **Delta 13C**: the ratio of stable Carbon isotopes 13C:12C from blood sample\n\n\n#### Clean column names\n\nOften we might want to change the names of our variables. They might be non-intuitive, or too long. Our data has a couple of issues:\n\n* Some of the names contain spaces\n\n* Some of the names have capitalised letters\n\n* Some of the names contain brackets\n\n\nR is case-sensitive and also doesn't like spaces or brackets in variable names, because of this we have been forced to use backticks \\`Sample Number\\` to prevent errors when using these column names\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# CLEAN DATA ----\n\n# clean all variable names to snake_case \n# using the clean_names function from the janitor package\n# note we are using assign <- \n# to overwrite the old version of penguins \n# with a version that has updated names\n# this changes the data in our R workspace \n# but NOT the original csv file\n\n# clean the column names\n# assign to new R object\npenguins_clean <- janitor::clean_names(penguins_raw) \n\n# quickly check the new variable names\ncolnames(penguins_clean) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"study_name\"        \"sample_number\"     \"species\"          \n [4] \"region\"            \"island\"            \"stage\"            \n [7] \"individual_id\"     \"clutch_completion\" \"date_egg\"         \n[10] \"culmen_length_mm\"  \"culmen_depth_mm\"   \"flipper_length_mm\"\n[13] \"body_mass_g\"       \"sex\"               \"delta_15_n_o_oo\"  \n[16] \"delta_13_c_o_oo\"   \"comments\"         \n```\n\n\n:::\n:::\n\n\n\n\n\n\n<div class='webex-solution'><button>Import and clean names</button>\n\n\nWe can combine data import and name repair in a single step if we want to:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_clean <- read_csv (\"data/penguins_raw.csv\",\n                      name_repair = janitor::make_clean_names)\n```\n:::\n\n\n\n\n\n</div>\n\n\n\n#### Rename columns (manually)\n\nThe `clean_names` function quickly converts all variable names into <a class='glossary'>snake case<span class='def'>Snake case is a naming convention in computing that uses underscores to replace spaces between words, and writes words in lowercase. It’s commonly used for variable and subroutine names, filenames, and database table and column names</span></a>. The N and C blood isotope ratio names are still quite long though, so let's clean those with `dplyr::rename()` where \"new_name\" = \"old_name\".\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# shorten the variable names for isotope blood samples\n# use rename from the dplyr package\npenguins_clean <- rename(penguins_clean,\n         \"delta_15n\"=\"delta_15_n_o_oo\",  \n         \"delta_13c\"=\"delta_13_c_o_oo\")\n```\n:::\n\n\n\n\n\n#### Rename text values manually\n\nSometimes we may want to rename the values in our variables in order to make a shorthand that is easier to follow. This is changing the **values** in our columns, not the column names. \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# use mutate and case_when \n# for a statement that conditionally changes \n# the names of the values in a variable\npenguins <- penguins_clean |> \n  mutate(species = case_when(\n  species == \"Adelie Penguin (Pygoscelis adeliae)\" ~ \"Adelie\",\n  species == \"Gentoo penguin (Pygoscelis papua)\" ~ \"Gentoo\",\n  species == \"Chinstrap penguin (Pygoscelis antarctica)\" ~ \"Chinstrap\",\n  .default = as.character(species)\n  )\n  )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# use mutate and if_else\n# for a statement that conditionally changes \n# the names of the values in a variable\npenguins <- penguins |> \n  mutate(sex = if_else(\n    sex == \"MALE\", \"Male\", \"Female\"\n  )\n  )\n```\n:::\n\n\n\n\n\n::: {.callout-warning}\n\nNotice from here on out I am assigning the output of my code to the R object penguins, this means any new code \"overwrites\" the old penguins dataframe. This is because I ran out of new names I could think of, its also because my Environment is filling up with lots of data frame variants. \n\nBe aware that when you run code in this way, it can cause errors if you try to run the same code twice e.g. in the example above once you have changed MALE to Male, running the code again could cause errors as MALE is no longer present! \n\nIf you make any mistakes running code in this way, re-start your R session and run the code from the start to where you went wrong.\n\n:::\n\n\n\n\n::: {.cell layout-align=\"center\" type='warning'}\n<div class=\"warning\">\n<p>Have you checked that the above code block worked? Inspect your new\ntibble and check the variables have been renamed as you wanted.</p>\n</div>\n:::\n\n\n\n\n#### Rename text values with stringr\n\nDatasets often contain words, and we call these words \"(character) strings\".\n\nOften these aren't quite how we want them to be, but we can manipulate these as much as we like. Functions in the package `stringr`, are fantastic. And the number of different types of manipulations are endless!\n\nBelow we repeat the outcomes above, but with string matching: \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# use mutate and case_when \n# for a statement that conditionally changes \n# the names of the values in a variable\npenguins <- penguins_clean |> \n  mutate(species = stringr::word(species, 1)\n  ) |> \n  mutate(sex = stringr::str_to_title(sex))\n```\n:::\n\n\n\n\n\nAlternatively we could decide we want simpler species names but that we would like to keep the latin name information, but in a separate column. To do this we are using [regex](https://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html). Regular expressions are a concise and flexible tool for describing patterns in strings\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_clean |> \n    separate(\n        species,\n        into = c(\"species\", \"full_latin_name\"),\n        sep = \"(?=\\\\()\"\n    ) \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|study_name | sample_number|species        |full_latin_name      |region |island    |stage              |individual_id |clutch_completion |date_egg   | culmen_length_mm| culmen_depth_mm| flipper_length_mm| body_mass_g|sex    | delta_15n| delta_13c|comments                       |\n|:----------|-------------:|:--------------|:--------------------|:------|:---------|:------------------|:-------------|:-----------------|:----------|----------------:|---------------:|-----------------:|-----------:|:------|---------:|---------:|:------------------------------|\n|PAL0708    |             1|Adelie Penguin |(Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N1A1          |Yes               |11/11/2007 |             39.1|            18.7|               181|        3750|MALE   |        NA|        NA|Not enough blood for isotopes. |\n|PAL0708    |             2|Adelie Penguin |(Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N1A2          |Yes               |11/11/2007 |             39.5|            17.4|               186|        3800|FEMALE |   8.94956| -24.69454|NA                             |\n|PAL0708    |             3|Adelie Penguin |(Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N2A1          |Yes               |16/11/2007 |             40.3|            18.0|               195|        3250|FEMALE |   8.36821| -25.33302|NA                             |\n|PAL0708    |             4|Adelie Penguin |(Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N2A2          |Yes               |16/11/2007 |               NA|              NA|                NA|          NA|NA     |        NA|        NA|Adult not sampled.             |\n|PAL0708    |             5|Adelie Penguin |(Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N3A1          |Yes               |16/11/2007 |             36.7|            19.3|               193|        3450|FEMALE |   8.76651| -25.32426|NA                             |\n|PAL0708    |             6|Adelie Penguin |(Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N3A2          |Yes               |16/11/2007 |             39.3|            20.6|               190|        3650|MALE   |   8.66496| -25.29805|NA                             |\n\n</div>\n:::\n:::\n\n\n\n\n\n### Activity 2: Checking for duplications\n\nIt is very easy when inputting data to make mistakes, copy something in twice for example, or if someone did a lot of copy-pasting to assemble a spreadsheet (yikes!). We can check this pretty quickly\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# check for whole duplicate \n# rows in the data\npenguins |> \n  duplicated() |>  \n  sum() \n```\n:::\n\n\n\n\n```\n[1] 0\n```\nGreat! \n\nIf I did have duplications I could investigate further and extract these exact rows: \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Inspect duplicated rows\npenguins |> \n    filter(duplicated(penguins))\n```\n:::\n\n\n\n```\nA tibble:0 × 17\n0 rows | 1-8 of 17 columns\n```\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Keep only unduplicated data\npenguins |> \n    filter(!duplicated(penguins))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|study_name | sample_number|species |region |island    |stage              |individual_id |clutch_completion |date_egg   | culmen_length_mm| culmen_depth_mm| flipper_length_mm| body_mass_g|sex    | delta_15n| delta_13c|comments                       |\n|:----------|-------------:|:-------|:------|:---------|:------------------|:-------------|:-----------------|:----------|----------------:|---------------:|-----------------:|-----------:|:------|---------:|---------:|:------------------------------|\n|PAL0708    |             1|Adelie  |Anvers |Torgersen |Adult, 1 Egg Stage |N1A1          |Yes               |11/11/2007 |             39.1|            18.7|               181|        3750|Male   |        NA|        NA|Not enough blood for isotopes. |\n|PAL0708    |             2|Adelie  |Anvers |Torgersen |Adult, 1 Egg Stage |N1A2          |Yes               |11/11/2007 |             39.5|            17.4|               186|        3800|Female |   8.94956| -24.69454|NA                             |\n|PAL0708    |             3|Adelie  |Anvers |Torgersen |Adult, 1 Egg Stage |N2A1          |Yes               |16/11/2007 |             40.3|            18.0|               195|        3250|Female |   8.36821| -25.33302|NA                             |\n|PAL0708    |             4|Adelie  |Anvers |Torgersen |Adult, 1 Egg Stage |N2A2          |Yes               |16/11/2007 |               NA|              NA|                NA|          NA|NA     |        NA|        NA|Adult not sampled.             |\n|PAL0708    |             5|Adelie  |Anvers |Torgersen |Adult, 1 Egg Stage |N3A1          |Yes               |16/11/2007 |             36.7|            19.3|               193|        3450|Female |   8.76651| -25.32426|NA                             |\n|PAL0708    |             6|Adelie  |Anvers |Torgersen |Adult, 1 Egg Stage |N3A2          |Yes               |16/11/2007 |             39.3|            20.6|               190|        3650|Male   |   8.66496| -25.29805|NA                             |\n\n</div>\n:::\n:::\n\n\n\n\n\n### Activity 3: Checking for typos\n\nWe can also look for typos by asking R to produce all of the distinct values in a variable. This is more useful for categorical data, where we expect there to be only a few distinct categories\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Print only unique character strings in this variable\npenguins |>  \n  distinct(sex)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|sex    |\n|:------|\n|Male   |\n|Female |\n|NA     |\n\n</div>\n:::\n:::\n\n\n\n\nHere if someone had mistyped e.g. 'FMALE' it would be obvious. We could do the same thing (and probably should have before we changed the names) for species. \n\nWe can also trim leading or trailing empty spaces with `stringr::str_trim`. These are often problematic and difficult to spot e.g.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf2 <- tibble(label=c(\"penguin\", \" penguin\", \"penguin \")) \ndf2 # make a test dataframe\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|label   |\n|:-------|\n|penguin |\n|penguin |\n|penguin |\n\n</div>\n:::\n:::\n\n\n\n\nWe can easily imagine a scenario where data is manually input, and trailing or leading spaces are left in. These are difficult to spot by eye - but problematic because as far as R is concerned these are different values. We can use the function `distinct` to return the names of all the different levels it can find in this dataframe.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf2 |> \n  distinct()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|label   |\n|:-------|\n|penguin |\n|penguin |\n|penguin |\n\n</div>\n:::\n:::\n\n\n\n\nIf we pipe the data throught the `str_trim` function to remove any gaps, then pipe this on to `distinct` again - by removing the whitespace, R now recognises just one level to this data. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf2 |> \n  mutate(label=str_trim(label, side=\"both\")) |> \n  distinct()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|label   |\n|:-------|\n|penguin |\n\n</div>\n:::\n:::\n\n\n\n\n\n## Working with dates\n\nWorking with dates can be tricky, treating date as strictly numeric is problematic, it won't account for number of days in months or number of months in a year. \n\nAdditionally there's a lot of different ways to write the same date:\n\n* 13-10-2019\n\n* 10-13-2019\n\n* 13-10-19\n\n* 13th Oct 2019\n\n* 2019-10-13\n\nThis variability makes it difficult to tell our software how to read the information, luckily we can use the functions in the `lubridate` package. \n\n\n\n\n\n::: {.cell layout-align=\"center\" type='warning'}\n<div class=\"warning\">\n<p>If you get a warning that some dates could not be parsed, then you\nmight find the date has been inconsistently entered into the\ndataset.</p>\n<p>Pay attention to warning and error messages</p>\n</div>\n:::\n\n\n\n\nDepending on how we interpret the date ordering in a file, we can use `ymd()`, `ydm()`, `mdy()`, `dmy()` \n\n* **Question** What is the appropriate function from the above to use on the `date_egg` variable?\n\n\n<div class='webex-radiogroup' id='radio_BGKBQXUHVU'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BGKBQXUHVU\" value=\"\"></input> <span>ymd()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BGKBQXUHVU\" value=\"\"></input> <span>ydm()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BGKBQXUHVU\" value=\"\"></input> <span>mdy()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BGKBQXUHVU\" value=\"answer\"></input> <span>dmy()</span></label></div>\n\n\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins <- penguins |>\n  mutate(date_egg = lubridate::dmy(date_egg))\n```\n:::\n\n\n\n\n\n</div>\n\n\n\nHere we use the `mutate` function from `dplyr` to create a *new variable* called `date_egg_proper` based on the output of converting the characters in `date_egg` to date format. The original variable is left intact, if we had specified the \"new\" variable was also called `date_egg` then it would have overwritten the original variable. \n\n\nOnce we have established our date data, we are able to perform calculations or extract information. Such as the date range across which our data was collected.  \n\n### Calculations with dates\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  summarise(min_date=min(date_egg_proper),\n            max_date=max(date_egg_proper))\n```\n:::\n\n\n\n\nWe can also extract and make new columns from our date column - such as a simple column of the year when each observation was made:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  mutate(year = lubridate::year(date_egg))\n```\n:::\n\n\n\n\n\n## Factors\n\nIn R, factors are a class of data that allow for **ordered categories** with a fixed set of acceptable values. \n\nTypically, you would convert a column from character or numeric class to a factor if you want to set an intrinsic order to the values (“levels”) so they can be displayed non-alphabetically in plots and tables, or for use in linear model analyses (more on this later). \n\nWorking with factors is easy with the `forcats` package:\n\nUsing across - we can apply functions to columns based on selected criteria - here within mutate we are changing each column in the `.cols` argument and applying the function `forcats::as_factor()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  mutate(\n    across(.cols = c(\"species\", \"region\", \"island\", \"stage\", \"sex\"),\n           .fns = forcats::as_factor)\n  ) |> \n  select(where(is.factor)) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 5\n$ species <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie…\n$ region  <fct> Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers, Anvers…\n$ island  <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgers…\n$ stage   <fct> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stag…\n$ sex     <fct> Male, Female, Female, NA, Female, Male, Female, Male, NA, NA, …\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-important}\n\nUnless we assign the output of this code to an R object it will just print into the console, in the above I am demonstrating how to change variables to factors but we aren't \"saving\" this change.\n\n:::\n\n### Setting factor levels\n\nIf we want to specify the *correct* order for a factor we can use `forcats::fct_relevel`\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins <- penguins |> \n  mutate(mass_range = case_when(\n    body_mass_g <= 3500 ~ \"smol penguin\",\n    body_mass_g >3500 & body_mass_g < 4500 ~ \"mid penguin\",\n    body_mass_g >= 4500 ~ \"chonk penguin\",\n    .default = NA)\n  )\n```\n:::\n\n\n\n\nIf we make a barplot, the order of the values on the x axis will typically be in alphabetical order for any character data\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  drop_na(mass_range) |> \n  ggplot(aes(x = mass_range))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](05-dplyr_files/figure-html/unnamed-chunk-47-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\nTo convert a character or numeric column to class factor, you can use any function from the `forcats` package. They will convert to class factor and then also perform or allow certain ordering of the levels - for example using `forcats::fct_relevel()` lets you manually specify the level order. \n\nThe function `as_factor()` simply converts the class without any further capabilities.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins <- penguins |> \n  mutate(mass_range = as_factor(mass_range))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlevels(penguins$mass_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"mid penguin\"   \"smol penguin\"  \"chonk penguin\"\n```\n\n\n:::\n:::\n\n\n\n\nBelow we use `mutate()` and `as_factor()` to convert the column flipper_range from class character to class factor. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Correct the code in your script with this version\npenguins <- penguins |> \n  mutate(mass_range = fct_relevel(mass_range, \n                                  \"smol penguin\", \n                                  \"mid penguin\", \n                                  \"chonk penguin\")\n         )\n\nlevels(penguins$mass_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"smol penguin\"  \"mid penguin\"   \"chonk penguin\"\n```\n\n\n:::\n:::\n\n\n\n\nNow when we call a plot, we can see that the x axis categories match the intrinsic order we have specified with our factor levels. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  drop_na(mass_range) |>  \n  ggplot(aes(x = mass_range))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](05-dplyr_files/figure-html/unnamed-chunk-51-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>Factors will also be important when we build linear models a bit\nlater. The reference or intercept for a categorical predictor variable\nwhen it is read as a <code>&lt;chr&gt;</code> is set by R as the first\none when ordered alphabetically. This may not always be the most\nappropriate choice, and by changing this to an ordered\n<code>&lt;fct&gt;</code> we can manually set the intercept.</p>\n</div>\n:::\n\n\n\n\n\n\n## Summary\n\nIn this chapter we have successfully imported and checked our data for typos and small errors, we have also been introduce to some of the key functions in the `dplyr` package for data wrangling. Now that we have confidence in the format and integrity of our data, next time we will start to make insights and understand patterns. \n\n### Save scripts\n\n* Make sure you have **saved your script 💾**  and given it the filename `01_import_penguins_data.R` it should be saved in your **scripts folder**\n\n\n\n<div class='webex-solution'><button>Check your script</button>\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#___________________________----\n# SET UP ----\n## An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins ----\n\n### Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081. ----\n#__________________________----\n\n# PACKAGES ----\nlibrary(tidyverse) # tidy data packages\nlibrary(janitor) # cleans variable names\n#__________________________----\n# IMPORT DATA ----\npenguins_raw <- read_csv (\"data/penguins_raw.csv\")\n\nattributes(penguins_raw) # reads as tibble\n\nhead(penguins_raw) # check the data has loaded, prints first 10 rows of dataframe\n\n# CLEAN DATA ----\n\n# clean all variable names to snake_case \n# using the clean_names function from the janitor package\n# note we are using assign <- \n# to overwrite the old version of penguins \n# with a version that has updated names\n# this changes the data in our R workspace \n# but NOT the original csv file\n\n# clean the column names\n# assign to new R object\npenguins_clean <- janitor::clean_names(penguins_raw) \n\n# quickly check the new variable names\ncolnames(penguins_clean) \n\n# shorten the variable names for N and C isotope blood samples\n\npenguins <- rename(penguins_clean,\n         \"delta_15n\"=\"delta_15_n_o_oo\",  # use rename from the dplyr package\n         \"delta_13c\"=\"delta_13_c_o_oo\")\n\n# use mutate and case_when for a statement that conditionally changes the names of the values in a variable\npenguins <- penguins_clean |> \n  mutate(species = case_when(species == \"Adelie Penguin (Pygoscelis adeliae)\" ~ \"Adelie\",\n                             species == \"Gentoo penguin (Pygoscelis papua)\" ~ \"Gentoo\",\n                             species == \"Chinstrap penguin (Pygoscelis antarctica)\" ~ \"Chinstrap\"))\n\n# use mutate and if_else\n# for a statement that conditionally changes \n# the names of the values in a variable\npenguins <- penguins |> \n  mutate(sex = if_else(\n    sex == \"MALE\", \"Male\", \"Female\"\n  )\n  )\n\n# use lubridate to format date and extract the year\npenguins <- penguins |>\n  mutate(date_egg = lubridate::dmy(date_egg))\n\npenguins |> \n  mutate(year = lubridate::year(date_egg))\n\n# Set body mass ranges\npenguins <- penguins |> \n  mutate(mass_range = case_when(\n    body_mass_g <= 3500 ~ \"smol penguin\",\n    body_mass_g >3500 & body_mass_g < 4500 ~ \"mid penguin\",\n    body_mass_g >= 4500 ~ \"chonk penguin\",\n    .default = NA)\n  )\n\n# Assign these to an ordered factor\n\npenguins <- penguins |> \n  mutate(mass_range = fct_relevel(mass_range, \n                                  \"smol penguin\", \n                                  \"mid penguin\", \n                                  \"chonk penguin\")\n         )\n```\n:::\n\n\n\n\n\n</div>\n\n\n\n- Does your workspace look like the below? \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![My neat project layout](images/project_penguin.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![My scripts and file subdirectory](images/r_script.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n- Does your script run from a <a class='glossary'>blank slate<span class='def'>R projects are set not to store their .Rhistory file which means everything required to recreate your analysis is contained in your scripts</span></a> blank slate without errors as described in {#sec-workflow}\n\n### Checklist for data checking\n\n- Is our dataframe in a <a class='glossary'>tidy data<span class='def'>Tidy data refers to a specific format for organizing datasets that makes data easier to work with for analysis and visualization in R, especially using the tidyverse. The concept was popularized by Hadley Wickham in his paper “Tidy Data” and is an essential principle for effective data manipulation.</span></a> format?\n\n- Is each column assigned to the correct data type?\n    \n    - Are dates formatted correctly?\n    - Are factors set where needed, are the levels in the correct order?\n    \n- Are variables consistently named (e.g. using a naming convention such as snake_case)?\n\n- Are text values in an appropriate format?\n\n- Do we have any data duplication?\n\n- Are there any typos or mistakes in character strings?\n\n\n## Activity: Test yourself\n\n\n**Question 1.** In order to subset a data by **rows** I should use the function <select class='webex-select'><option value='blank'></option><option value=''>select()</option><option value='answer'>filter()</option><option value=''>group_by()</option></select>\n\n**Question 2.** In order to subset a data by **columns** I should use the function <select class='webex-select'><option value='blank'></option><option value='answer'>select()</option><option value=''>filter()</option><option value=''>group_by()</option></select>\n\n**Question 3.** In order to make a new column I should use the function <select class='webex-select'><option value='blank'></option><option value=''>group_by()</option><option value=''>select()</option><option value='answer'>mutate()</option><option value=''>arrange()</option></select>\n\n**Question 4.** Which operator should I use to send the output from line of code into the next line? <select class='webex-select'><option value='blank'></option><option value=''>+</option><option value=''><-)</option><option value='answer'>|></option><option value=''>%in%</option></select>\n\n**Question 5.** What will be the outcome of the following line of code?\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Adelie\")\n```\n:::\n\n\n\n\n\n<select class='webex-select'><option value='blank'></option><option value=''>The penguins dataframe object is reduced to include only Adelie penguins from now on</option><option value='answer'>A new filtered dataframe of only Adelie penguins will be printed into the console</option></select>\n\n\n\n<div class='webex-solution'><button>Explain this answer</button>\n\n\nUnless the output of a series of functions is \"assigned\" to an object using `<-` it will not be saved, the results will be immediately printed. This code would have to be modified to the below in order to create a new filtered object `penguins_filtered`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_filtered <- penguins |> \n  filter(species == \"Adelie\")\n```\n:::\n\n\n\n\n\n</div>\n\n\n<br>\n\n\n**Question 6.** What is the main point of a data \"pipe\"?\n\n<select class='webex-select'><option value='blank'></option><option value=''>The code runs faster</option><option value='answer'>The code is easier to read</option></select>\n\n\n**Question 7.** The naming convention outputted by the function `janitor::clean_names() is \n<select class='webex-select'><option value='blank'></option><option value='answer'>snake_case</option><option value=''>camelCase</option><option value=''>SCREAMING_SNAKE_CASE</option><option value=''>kebab-case</option></select>\n\n\n**Question 8.** Which package provides useful functions for manipulating character strings? \n\n<select class='webex-select'><option value='blank'></option><option value='answer'>stringr</option><option value=''>ggplot2</option><option value=''>lubridate</option><option value=''>forcats</option></select>\n\n**Question 9.** Which package provides useful functions for manipulating dates? \n\n<select class='webex-select'><option value='blank'></option><option value=''>stringr</option><option value=''>ggplot2</option><option value='answer'>lubridate</option><option value=''>forcats</option></select>\n\n\n**Question 10.** If we do not specify a character variable as a factor, then ordering will default to what?\n\n<select class='webex-select'><option value='blank'></option><option value=''>numerical</option><option value='answer'>alphabetical</option><option value=''>order in the dataframe</option></select>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n\n## Glossary\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> blank slate </td>\n   <td style=\"text-align:left;\"> R projects are set not to store their .Rhistory file which means everything required to recreate your analysis is contained in your scripts </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> console </td>\n   <td style=\"text-align:left;\"> The R console is the interactive interface within the R environment where users can type and execute R code. It is the place where you can directly enter commands, see their output, and interact with the R programming language in real-time. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> pipe </td>\n   <td style=\"text-align:left;\"> An operator that allows you to chain multiple functions together in a sequence </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> snake case </td>\n   <td style=\"text-align:left;\"> Snake case is a naming convention in computing that uses underscores to replace spaces between words, and writes words in lowercase. It's commonly used for variable and subroutine names, filenames, and database table and column names </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidy data </td>\n   <td style=\"text-align:left;\"> Tidy data refers to a specific format for organizing datasets that makes data easier to work with for analysis and visualization in R, especially using the tidyverse. The concept was popularized by Hadley Wickham in his paper \"Tidy Data\" and is an essential principle for effective data manipulation. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n## Reading\n\n- [Dplyr](https://dplyr.tidyverse.org/index.html)\n\n- [Lubridate](https://lubridate.tidyverse.org/)\n\n- [Stringr](https://stringr.tidyverse.org/)\n",
    "supporting": [
      "05-dplyr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}