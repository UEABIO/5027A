{
  "hash": "841985ce398705ee391a38a21698714b",
  "result": {
    "engine": "knitr",
    "markdown": "\n#  R Basics {#sec-basicr}\n\n\n\n\n\n\n\n\n\n\n-   R is the name of the programming language we will learn on this course.\n\n-   RStudio is a convenient interface which we will be using throughout the course in order to learn how to organise data, produce accurate data analyses & data visualisations.\n\nR is a programming language that you will write code in, and RStudio is an Integrated Development Environment (IDE) which makes working with R easier. Think of it as knowing English and using a plain text editor like NotePad to write a book versus using a word processor like Microsoft Word. You could do it, but it wouldn't look as good and it would be much harder without things like spell-checking and formatting. In a similar way, you can use R without R Studio but we wouldn't recommend it. The key thing to remember is that although you will do all of your work using RStudio for this course, you are actually using **two** pieces of software which means that from time-to-time, both of them may have separate updates.\n\nR and RStudio can be downloaded for free onto your [personal computers](https://www.rstudio.com/products/rstudio/)(see Appendices), but for convenience we will use a classroom space on **Posit cloud**.\n\n[Posit cloud](https://rstudio.cloud/) is a cloud-based service where we can log into remotely hosted servers that host our data analysis projects.\n\nThe advantage of using Posit cloud is that all the extra packages and functions you need for this course will already be installed. You can log-in to your workspace from any computer as long as you have an internet connection and remember you username and password. I can also \"visit\" your projects and help out when you get stuck, if they are hosted on Posit cloud.\n\nEventually we will may also add extra tools like GitHub and RMarkdown for data reproducibility, literate and collaborative programming.\n\nBy the end of this course I hope you will have the tools to confidently analyze real data, make informative and beautiful data visuals, and be able to analyze lots of different types of data.\n\n## Using Posit cloud\n\nAll of our sessions will run on cloud-based software. All you have to do is make a free account, and join our Workspace.\n\nOnce you are signed up - you will see that there are two spaces:\n\n-   Your workspace - for personal use (20hrs/month)\n\n-   Our shared classroom - educational licence (no limit)\n\nMake sure you are working in the classroom workspace - so that I can distribute project work and 'visit' your projects if needed.\n\nPosit cloud works in exactly the same way as RStudio, but means you don't have to download any software. You can access the hosted cloud server and your projects through any browser connection (Chrome works best), from any computer.\n\nHere is a good reference guide to [Posit cloud](https://rstudio.cloud/learn/guide#projects)\n\n## Getting to know RStudio\n\nR Studio has a console that you can try out code in (appearing as the bottom left window), there is a script editor (top left), a window showing functions and objects you have created in the \"Environment\" tab (top right window in the figure), and a window that shows plots, files packages, and help documentation (bottom right).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![RStudio interface](images/rstudio.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nYou will learn more about how to use the features included in R Studio throughout this course, however, I highly recommend watching [RStudio Essentials 1](https://rstudio.com/resources/webinars/programming-part-1-writing-code-in-rstudio/) at some point. \n\nThe video lasts \\~30 minutes and gives a tour of the main parts of R Studio.\n\n### Consoles vs. scripts\n\n* The *script* window is the place to enter and run code so that it is easily edited and saved for future use. Usually the Script Window is shown at the top left in RStudio. If this window is not shown, it will be visible *if* you open a previously saved R script, *or* if you create a new R Script. You create new R Script by clicking on File > New File > R Script in the RStudio menu bar.\n\n* To execute your code in the R script, you can either highlight the code and click on Run, or you can highlight the code and press CTRL + Enter on your keyboard.\n\n* The *console*: you can enter code directly in the Console Window and click Enter. The commands that you run will be shown in the History Window on the top right of RStudio. Though it is much more difficult to keep track of your work this way.\n\n### Environment\n\nThe Environment tab (top right) allows you to see what objects are in the workspace. If you create variables or data frames, you have a visual listing of everything in the current workspace. When you start a new project this should be completely empty.\n\n### Plots, files, packages, help\n\n1. Plots - The Plots panel, shows all your plots. There are buttons for opening the plot in a separate window and exporting the plot as a pdf or jpeg (though you can also do this with code.)\n\n2. Files - The files panel gives you access to the file directory on your hard drive. \n\n3. Packages - Shows a list of all the R packages installed on your harddrive and indicates whether or not they are currently loaded. Packages that are loaded in the current session are checked while those that are installed but not yet loaded are unchecked. We will discuss packages more later.\n\n4. Help - Help menu for R functions. You can either type the name of a function in the search window, or use the code to search for a function with the name\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![RStudio interface labelled](images/RStudio_Screenshot_Labels.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n### Make RStudio your own\n\nYou can [personalise the RStudio GUI](https://support.rstudio.com/hc/en-us/articles/115011846747-Using-Themes-in-the-RStudio-IDE) as much as you like. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/dark_mode.png){fig-align='center' width=50%}\n:::\n\n::: {.cell-output-display}\n![](images/classic_mode.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n\n\n## Get Help!\n\nThere are a lot of sources of information about using R out there. Here are a few helpful places to get help when you have an issue, or just to learn more\n\n-   The R help system itself - type `help()` and put the name of the package or function you are querying inside the brackets\n\n-   Vignettes - type `browseVignettes()` into the console and hit Enter, a list of available vignettes for all the packages we have will be displayed\n\n-   Cheat Sheets - available at [RStudio.com.](https://www.rstudio.com/resources/cheatsheets/) Most common packages have an associate cheat sheet covering the basics of how to use them. Download/bookmark ones we will use commonly such as ggplot2, data transformation with dplyr, Data tidying with tidyr & Data import.\n\n-   Google - I use Google constantly, because I continually forget how to do even basic tasks. If I want to remind myself how to round a number, I might type something like R round number - if I am using a particular package I should include that in the search term as well\n\n-   Ask for help - If you are stuck, getting an error message, can't think what to do next, then ask someone. It could be me, it could be a classmate. When you do this it is very important that you show the code, include the error message. \"This doesn't work\" is not helpful. \"Here is my code, this is the data I am using, I want it to do X, and here's the problem I get.\"\n\n\n\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>It may be daunting to send your code to someone for help.</p>\n<p>It is natural and common to feel apprehensive, or to think that your\ncode is really bad. I still feel the same! But we learn when we share\nour mistakes, and eventually you will find it funny when you look back\non your early mistakes, or laugh about the mistakes you still\noccasionally make!</p>\n</div>\n:::\n\n\n\n\n## R \n\nGo to Posit cloud and enter the Project labelled `Day One` - this will clone the project and provide you with your own project workspace.\n\nFollow the instructions below to get used to the R command line, and how R works as a language.\n\n## Your first R command\n\nIn the RStudio pane, navigate to the **console** (bottom left) and `type or copy` the below it should appear at the \\>\n\nHit Enter on your keyboard.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n10 + 20\n```\n:::\n\n\n\n\n-   What answer did you get?\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n30\n```\n:::\n\n\n\n\n\n</div>\n\n\nThe first line shows the request you made to R, the next line is R's response\n\nYou didn't type the `>` symbol: that's just the R command prompt and isn't part of the actual command.\n\nWhen a complete expression is entered at the prompt, it is evaluated and the result of the evaluated expression is returned. The result may be auto-printed.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprint(10 + 20) ## explicit printing\n\n10 + 20 ## autoprinting\n```\n:::\n\n\n\n\nUsually, with interactive work, we do not explicitly print objects with the print function; it is much easier to auto-print them by typing the name of the object and hitting return/enter. However, when writing scripts, functions, or more extended programs, there is sometimes a need to explicitly print objects.\n\n\nWhen an R vector is printed, you will notice that an index for the vector is printed in square brackets `[]` on the side. For example, see this integer sequence \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1:30\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30\n```\n\n\n:::\n:::\n\n\n\n\nThe numbers in the square brackets are not part of the vector itself; they are merely part of the printed output.\n\n> Note that the : operator is used to create integer sequences\n\n### Operators\n\nThere are a few different types of operators to consider in R\n\n#### Assignment Operator\n\n|Operator|Description\n|-----|-----|\n|<-|\tused to assign values to variables|\n\n#### Arithmetic Operators\n\n|Operator|Description\n|-----|-----|\n|+|\taddition|\n|-|\tsubtraction|\n|*|\tmultiplication|\n|/|\tdivision|\n|^|\texponentiation|\n\n#### Relational Operators\n\n|Operator|Description\n|-----|-----|\n|<|less than|\n|<=|less than or equal to|\n|>|\tgreater than|\n|>=|greater than or equal to|\n|==|exactly equal to|\n|!=|not equal to|\n\n#### Logical Operators\n\n|Operator|Description\n|-----|-----|\n|!|not|\n|&|AND|\n|⎮|  OR|\n\n#### Membership Operators\n\n|Operator|Description\n|-----|-----|\n|%in%|used to check if an element is in a vector or list|\n\n### Typos\n\n\n\n\n::: {.cell layout-align=\"center\" type='warning'}\n<div class=\"warning\">\n<p>Before we go on to talk about other types of calculations that we can\ndo with R, there’s a few other things I want to point out. The first\nthing is that, while R is good software, it’s still software. It’s\npretty stupid, and because it’s stupid it can’t handle typos. It takes\nit on faith that you meant to type exactly what you did type.</p>\n</div>\n:::\n\n\n\n\nSuppose you forget to hit the shift key when trying to type `+`, and as a result your command ended up being `10 = 20` rather than `10 + 20`. Try it for yourself and replicate this error message:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n10 = 20\n```\n:::\n\n\n\n\n\n<div class='webex-solution'><button>What answer did you get?</button>\n\n\n\n\n::: {.cell layout-align=\"center\"}\nError in 10 = 20 : invalid (do_set) left-hand side to assignment\n:::\n\n\n\n\n\n</div>\n\n\nWhat's going on: R tries to interpret `10 = 20` as a command, but it doesn't make sense, so it gives you an error message.\n\nWhen a person sees this, they might realize it's a typo because the `+` and `=` keys are right next to each other on the keyboard. But R doesn't have that insight, so it just gets confused.\n\nWhat's even trickier is that some typos won't create errors because they accidentally form valid R commands. For example, if I meant to type `10 + 20` but mistakenly pressed a neighboring key, I'd end up with `10 - 20`. Now, R can't read your mind to know you wanted to add, not subtract, so something different happens:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n10 - 20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -10\n```\n\n\n:::\n:::\n\n\n\n\nIn this case, R produces the right answer, but to the the wrong question.\n\n### More simple arithmetic\n\nOne of the best ways to get familiar with R is to experiment with it. The good news is that it's quite hard to mess things up, so don't stress too much. Just type whatever you like into the console and see what happens.\n\nNow, if your console's last line looks like this:\n\n    > 10+\n    + \n\nAnd there's a *blinking cursor* next to that plus sign, it means R is patiently waiting for you to complete your command. It believes you're still typing, so it hasn't tried to run anything yet. This plus sign is a bit different from the usual prompt (the `>` symbol). It's there to nudge you that R is ready to \"add\" what you're typing now to what you typed before. For example, type `20` and hit enter, and then R will complete the command like this:\n\n    > 10 +\n    + 20\n    [1] 30\n\n*Alternatively* hit the escape key, and R will forget what you were trying to do and return to a blank line.\n\n### Try some simple maths\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1+7\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n13-10\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n4*6\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n12/3\n```\n:::\n\n\n\n\nRaise a number to the power of another\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n5^4\n```\n:::\n\n\n\n\nMultiplying a number $x$ by itself $n$ times is called \"raising $x$ to the $n$-th power\". Mathematically, this is written as $x^n$. Some values of $n$ have special names: in particular $x^2$ is called $x$-squared, and $x^3$ is called $x$-cubed. So, the 4th power of 5 is calculated like this: \n\n$$5^4 = 5 \\times 5 \\times 5 \\times 5 $$\n\n### Perform some combos\n\nR follows the standard order of operations (BODMAS/BIDMAS), which means it first calculates within brackets, then deals with exponents, followed by division and multiplication, and finally addition and subtraction.\n\nLet's look at two examples to see how the order of operations affects the results:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n3^2-5/2\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(3^2-5)/2\n```\n:::\n\n\n\n\nSimilarly if we want to raise a number to a fraction, we need to surround the fraction with parentheses `()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n16^1/2\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n16^(1/2)\n```\n:::\n\n\n\n\nThe first one calculates 16 raised to the power of 1, then divided this answer by two. The second one raises 16 to the power of a half. A big difference in the output.\n\n\n\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>While the cursor is in the console, you can press the up arrow to see\nall your previous commands.</p>\n<p>You can run them again, or edit them. Later on we will look at\nscripts, as an essential way to re-use, store and edit commands.</p>\n</div>\n:::\n\n\n\n\n## \"TRUE or FALSE\" data\n\nTime to make a sidebar onto another kind of data. Many concepts in programming rely on the idea of a ***logical value***. A logical value is an assertion about whether something is true or false. This is implemented in R in a pretty straightforward way. There are two logical values, namely `TRUE` and `FALSE`. Despite the simplicity, logical values are very useful things. Let's see how they work.\n\n### Assessing mathematical truths\n\nTime to explore a different kind of data. In programming, many concepts rely on logical values. A logical value is a statement about whether something is true or false. In R, this is pretty straightforward. There are two logical values: `TRUE` and `FALSE`. Despite their simplicity, these logical values are incredibly useful. Let's dive into how they work.\n\nIn R, basic mathematics is solid, and there's no room for manipulation. When you ask R to calculate `2 + 2`, it always provides the same answer,\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\nup to this point, R has been performing calculations without explicitly asserting whether $2 + 2 = 4$ is a true statement. If I want R to make an explicit judgment, I can use a command like this:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n2 + 2 == 4\n```\n:::\n\n\n\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n\n::: {.cell layout-align=\"center\"}\nTRUE\n:::\n\n\n\n\n\n</div>\n\n\nWhat I've done here is use the ***equality operator***, `==`, to force R to make a \"true or false\" judgement.\n\n\n\n\n::: {.cell layout-align=\"center\" type='warning'}\n<div class=\"warning\">\n<p>This is a very different operator to the assignment operator\n<code>=</code> you saw previously.</p>\n<p>A common typo that people make when trying to write logical commands\nin R (or other languages, since the “<code>=</code> versus\n<code>==</code>” distinction is important in most programming languages)\nis to accidentally type <code>=</code> when you really mean\n<code>==</code>.</p>\n</div>\n:::\n\n\n\n\nOkay, let's see what R thinks of `2 +2 ==5`:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n2+2 == 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nNow, let's see what happens when I attempt to make R believe that two plus two equals five by using an assignment statement like `2 + 2 = 5` or `2 + 2 <- 5`. Here's the outcome:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n2 + 2 = 5\n```\n:::\n\n\n\n\n    Error in 2 + 2 = 5 : target of assignment expands to non-language object\n\nIndeed, R isn't too fond of this idea. It quickly realizes that `2 + 2` is not a variable (that's what the \"non-language object\" part is saying), and it refuses to let you \"reassign\" it. While R can be quite flexible and allows you to do some remarkable things to redefine parts of itself, there are fundamental truths it simply won't budge on. It won't tamper with the laws of addition, and it won't redefine the number `2`.\n\nThat's probably for the best.\n\n## Storing outputs\n\nWhen dealing with more complex questions, it's often helpful to store our answers and use them in later steps. Fortunately, this is quite easy to do in R. We can assign the results to a name with the **assignment operator**:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\na <- 1+2\n```\n:::\n\n\n\n\nThis literally means please *assign* the value of `1+2` to the name `a`. We use the **assignment operator** `<-` to make this assignment.\n\n\n\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>Note the shortcut key for &lt;- is Alt + - (Windows) or Option + -\n(Mac)</p>\n</div>\n:::\n\n\n\n\n\nBy performing this action, you'll achieve two things:\n\nYou will notice in the top right-hand pane within the **Environment** tab that there is now an **object** labeled a with a value of `3`.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![object a is now visible withe a value of 3 in the Environment Pane](images/environment.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n- You can check what the variable a contains by typing it into your Console and pressing Enter.\n\n- Keep in mind that you won't see the result of your operations until you type the object into the R console and press Enter.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\na  ## autoprinting\n\nprint(a) ## explicit printing\n```\n:::\n\n\n\n\n\n<div class='webex-solution'><button>What output do you get when you type a into your console?</button>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n3\n```\n:::\n\n\n\n\n\n</div>\n\n\nYou can now call this object at *any time* during your R session and perform calculations with it.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n2 * a\n```\n:::\n\n\n\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n6\n```\n:::\n\n\n\n\n\n</div>\n\n\n\nWhat happens if we assign a value to a named object that **already** exists in our R environment??? for example\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\na <- 10\na\n```\n:::\n\n\n\n\nThe value of `a` is now 10.\n\nYou should see that the previous assignment is lost, *gone forever* and has been replaced by the new value.\n\nWe can assign lots of things to objects, and use them in calculations to build more objects.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nb <- 5\nc <- a + b\n```\n:::\n\n::: {.cell layout-align=\"center\" type='warning'}\n<div class=\"warning\">\n<p>Remember: If you now change the value of b, the value of c does\n<em>not</em> change.</p>\n<p>Objects are totally <strong>independent</strong> from each other once\nthey are made.</p>\n<p>Overwriting objects with new values means the old value is lost.</p>\n</div>\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nb <- 7\nb\nc\n```\n:::\n\n\n\n\n-   What is the value of `c`?\n\n\n<div class='webex-solution'><button>What is the value of c ?</button>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n[1] 15\n:::\n\n\n\n\nWhen `c` was created it was a product of `a` and `b` having values of 10 and 15 respectively. \nIf we re-ran the command `c <- a + b` *after* changing the value of `b` **then** we would get a value of 17. \n\n\n</div>\n\n\nLook at the environment tab again - you should see it's starting to fill up now!\n\n\n\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>RStudio will by default save the objects in its memory when you close\na session.</p>\n<p>These will then be there the next time you logon. It might seem nice\nto be able to close things down and pick up where you left off, but its\nactually quite dangerous. It’s messy, and can cause lots of problems\nwhen we work with scripts later, so don’t do this!</p>\n<p>To stop RStudio from saving objects by default go to Tools &gt;\nProject Options option and change “Save workspace to .RData on exit” to\n“No” or “Never”.</p>\n<p>Instead we are going to learn how to use scripts to quickly re-run\nanalyses we have been working on.</p>\n</div>\n:::\n\n\n\n\n### Choosing names\n\n-   Use informative variable names. As a general rule, using meaningful names like `orange` and `apple` is preferred over arbitrary ones like `variable1` and `variable2`. Otherwise it's very hard to remember what the contents of different variables actually are.\n\n-   Use short variable names. Typing is a pain and no-one likes doing it. So we much prefer to use a name like `apple` over a name like `pink_lady_apple`.\n\n-   Use one of the conventional naming styles for multi-word variable names. R only lets you use certain things as **legal** names. Legal names must start with a letter **not** a number, which can then be followed by a sequence of letters, numbers, ., or \\_. R does not like using spaces. Upper and lower case names are allowed, but R is case sensitive so `Apple` and `apple` are different.\n\n-   My favourite naming convention is `snake_case` short, lower case only, spaces between words are separated with a \\_. It's easy to read and easy to remember.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![courtesy of Allison Horst](images/snake_case.png){fig-align='center' fig-alt='snake_case' width=80%}\n:::\n:::\n\n\n\n\n## R objects\n\nIn R, there are five fundamental or \"atomic\" classes of objects:\n\n- Character: These represent text or character strings.\n\n- Numeric (num) or Double (dbl): These are used for real numbers (e.g., decimal numbers).\n\n- Integer: Used for whole numbers.\n\n- Complex: For complex numbers.\n\n- Logical: Represented as True or False, these are used for logical values.\n\nThe most basic type of R object is a vector. You can create empty vectors using the `vector()` function. The primary rule regarding vectors in R is that a vector can only contain objects of the same class.\n\nHowever, as with any good rule, there's an exception, which is the \"list.\" Lists are represented as vectors but can hold objects of different classes, which is why they're often used.\n\n### Numbers\n\nIn R, both \"dbl\" and \"num\" refer to numeric data types, but there is a subtle difference between them:\n\n- dbl (\"double\"): This refers to double-precision floating-point numbers, which are capable of storing real numbers with high precision. Double-precision numbers have more decimal places of accuracy and can represent a wider range of values without loss of precision. When you perform arithmetic operations, R typically returns results as \"dbl\" values by default.\n\n- num (\"numeric\"): \"Num\" is a more general term that includes not only double-precision floating-point numbers but also integer values. In R, integers are a subtype of numeric data. Numeric data can include both integers and double-precision floating-point numbers, depending on the specific data and how it is represented.\n\nSo, \"dbl\" specifically denotes double-precision floating-point numbers, while \"num\" encompasses a broader range of numeric data, including both integers and double-precision numbers. In most cases, you can use \"num\" to work with numeric data in a more general sense, while \"dbl\" focuses on the higher-precision representation of real numbers.\n\n\n## Attributes\n\nR objects can come with attributes, which are essentially metadata for the object. These metadata are handy because they help describe the object. For instance, in a data frame, column names serve as attributes, clarifying the data contained in each column. Here are a few examples of R object attributes:\n\n- `names()` and `dimnames()`\n\n- dimensions (e.g., for matrices and arrays) `dim()`\n\n- `class()` (e.g., integer, numeric)\n\n- `length()`\n\n- Other user-defined attributes or metadata\n\nYou can access the attributes of an object, if it has any, by using the `attributes()` function. If an R object doesn't have any attributes, the `attributes()` function will return NULL.\n\n## Vectors\n\nWe have been working with R objects containing a single element of data (the technical term is **scalar**), but we will more commonly work with vectors. A vector is a sequence of elements, all of the same data type. These could be logical, numerical, character etc.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnumeric_vector <- c(1,2,3)\n\ncharacter_vector <- c(\"fruits\", \"vegetables\", \"seeds\")\n\nlogical_vector <- c(TRUE, TRUE, FALSE)\n\ninteger_vector <- 1:10\n```\n:::\n\n\n\n\n### Coercion\n\nIn R, when different classes of objects are mixed together in a vector, coercion occurs to ensure that every element in the vector belongs to the same class. Coercion is the process of converting objects to a common class to make the combination reasonable. Let's see the effects of implicit coercion in the provided examples:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ny <- c(2.3, \"a\") # Here, we're mixing a numeric value (1.7) with a character value (\"a\"). To make them compatible, R coerces both elements into character values. So, y becomes a character vector.\n\ny <- c(TRUE, 2) # In this case, we're combining a logical value (TRUE) with a numeric value (2). R coerces the logical value into 1, so y becomes a numeric vector.\n\ny <- c(\"a\", TRUE) # We're mixing a character value (\"a\") with a logical value (TRUE). In this scenario, R coerces the logical value into a character value, resulting in y becoming a character vector.\n```\n:::\n\n\n\n\nSo, the outcome depends on how R can reasonably represent all the objects in the vector. It aims to create a vector of the most inclusive class to accommodate the mixed objects. Keep in mind that this coercion can lead to unexpected results, so it's essential to be aware of the implicit type conversion when mixing different data types in R.\n\nObjects can also be **explicitly coerced** from one class to another using the as.* functions, if available.\n\n### Task\n\nCreate the following vector and check its class, then note what happens when you attempt to coerce to numeric, logical and character\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- 0:5\n```\n:::\n\n\n\n\n\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nas.numeric(x)\n\nas.logical(x)\n\nas.character(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 2 3 4 5\n[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n[1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\"\n```\n\n\n:::\n:::\n\n\n\n\n\n` r unhide()`\n\nSometimes, R can’t figure out how to coerce an object and this can result in `NA`s being produced\n\n### Subsetting vectors\n\nWith numerical indexing, you enter a vector of integers corresponding to the values in the vector you want to access in the form a[index], where a is the vector, and index is a vector of index values. For example, let’s use numerical indexing to get values from our character_vector\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncharacter_vector[2]\n# [1] \"vegetables\"\n\n\ncharacter_vector[1:2]\n# [1] \"fruits\"     \"vegetables\"\n\ncharacter_vector[c(1,3)]\n# [1] \"fruits\" \"seeds\" \n```\n:::\n\n\n\n\nWe can also use logical indexing\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnumeric_vector <=2\n# [1]  TRUE  TRUE FALSE\n\ncharacter_vector == \"fruits\"\n#[1]  TRUE FALSE FALSE\n```\n:::\n\n\n\n\n### Operations on vectors\n\nWe can run the same basic operations on vectors as we did on scalars\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- c(1,2,3)\ny <- c(2,3,4)\n\n# Operations will happen between vectors\nx*y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  6 12\n```\n\n\n:::\n:::\n\n\n\n\nA very *super-wickedly*, **important**, concept: R likes to operate on vectors of the same length, so if it encounters two vectors of different lengths in a binary operation, it merely replicates (recycles) the smaller vector until it is the same length as the longest vector, then it does the operation.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- c(1,2,3)\ny <- c(1,2)\n\n# Operations will happen between vectors\nx*y\n```\n:::\n\n\n\n```\n[1] 1 4 3\n\nWarning: longer object length is not a multiple of shorter object length[1] 1 4 3\n\n```\n\n## Matrices\n\nMatrices can be thought of as vectors with an added dimension attribute. This dimension attribute is a two-element integer vector specifying the number of rows and columns, which defines the shape and structure of the matrix.\n\n\n\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>Data frames are also two-dimensional but can store columns of\ndifferent data types - matrices are simpler as they consist of elements\nof the same data type.</p>\n</div>\n:::\n\n\n\n\nMatrices are constructed \"columns-first\" so entries start in the \"upper left\" and and run down columns. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nm <- matrix(1:6, nrow = 2, ncol = 3) \nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nattributes(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$dim\n[1] 2 3\n```\n\n\n:::\n:::\n\n\n\n\nWe can create matrices in several ways:\n\n- Adding a `dim()` to existing vectors\n\n- Column/row-binding vectors with `cbind()` and `rbind()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nm <- 1:6\n\ndim(m) <- c(2,3)\n\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\na <- 1:2\nb <- 3:4\nc <- 5:6\n\nm <- cbind(a,b,c)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     a b c\n[1,] 1 3 5\n[2,] 2 4 6\n```\n\n\n:::\n:::\n\n\n\n\nYou will see how in this last operation column names were added to the matrix, we can add, change or remove column and rownames on a matrix with `colnames()` and `rownames()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrownames(m) <- c(\"y\",\"z\")\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  a b c\ny 1 3 5\nz 2 4 6\n```\n\n\n:::\n:::\n\n\n\n\n## Lists\n\nLists are a versatile and fundamental data type in R. They set themselves apart from regular vectors by allowing you to store elements of different classes within the same list. This flexibility is what makes lists so powerful for various data structures and data manipulation tasks.\n\nYou can create lists explicitly using the `list()` function, which can take an arbitrary number of arguments. Lists, when combined with functions like the \"apply\" family, enable you to perform complex and versatile data manipulations and analyses in R. Lists are often used to represent heterogeneous data structures, such as datasets where different columns can have different data types and structures.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nl <- list(1, \"apple\", TRUE )\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"apple\"\n\n[[3]]\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nWe can also create empty lists of set lengths with the `vector()` function, this can be useful for preallocating memory for iterations - as we will see later\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nl <- vector(\"list\", length = 3)\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n```\n\n\n:::\n:::\n\n\n\n\nLists can also have names\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnames(l) <- c(\"apple\",\"orange\",\"pear\")\n```\n:::\n\n\n\n\n## Dataframes\n\nData frames are essential for storing tabular data in R and find extensive use in various statistical modeling and data analysis applications. They offer a structured way to manage and work with data in R, and packages like dplyr, developed by Hadley Wickham, provide optimized functions for efficient data manipulation with data frames.\n\nHere are some key characteristics and advantages of data frames:\n\n- Tabular Structure: Data frames are a type of list, where each element in the list represents a column. The number of rows in each column is the same, and this tabular structure makes them suitable for working with datasets.\n\n- Mixed Data Types: Unlike matrices, data frames can contain columns with different classes of objects. This flexibility allows you to handle real-world datasets that often include variables of different data types.\n\n- Column and Row Names: Data frames include column names, which describe the variables or predictors. Additionally, they have a special attribute called \"row.names\" that provides information about each row in the data frame.\n\n- Creation and Conversion: Data frames can be created in various ways, such as reading data from files using functions like read.table() and read.csv(). You can also create data frames explicitly with data.frame().\n\n- Working with Data: Data frames are especially useful when working with datasets that require data cleaning, transformation, or merging. They provide a high level of data organization, and many R packages are designed to work seamlessly with data frames.\n\n- dplyr: The `dplyr` package is optimized for efficient data manipulation with data frames. It offers a set of functions to perform data operations quickly and intuitively.\n\nData frames are a fundamental structure for managing tabular data in R. They excel in handling datasets with mixed data types and are essential for various data analysis and modeling tasks.\n\nTo create a dataframe from vectors we use the `data.frame()` function\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsurvey <- data.frame(\"index\" = c(1, 2, 3, 4, 5),\n                     \"sex\" = c(\"m\", \"m\", \"m\", \"f\", \"f\"),\n                     \"age\" = c(99, 46, 23, 54, 23))\n```\n:::\n\n\n\n\nThere is one key argument to `data.frame()` and similar functions called `stringsAsFactors`. By default, the data.frame() function will automatically convert any string columns to a specific type of object called a factor in R. A factor is a nominal variable that has a well-specified possible set of values that it can take on. For example, one can create a factor sex that can only take on the values \"male\" and \"female\".\n\n\n\n\n::: {.cell layout-align=\"center\" type='warning'}\n<div class=\"warning\">\n<p>Since R ver 4.0 release, stringsAsFactors is set FALSE by\ndefault!</p>\n</div>\n:::\n\n\n\n\nHowever, as I’m sure you’ll discover, having R automatically convert your string data to factors can lead to lots of strange results. For example: if you have a factor of sex data, but then you want to add a new value called other, R will yell at you and return an error. I hate, hate, HATE when this happens. While there are very, very rare cases when I find factors useful, I almost always don’t want or need them. For this reason, I avoid them at all costs.\n\nTo tell R to not convert your string columns to factors, you need to include the argument `stringsAsFactors = FALSE` when using functions such as `data.frame()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstr(survey)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t5 obs. of  3 variables:\n $ index: num  1 2 3 4 5\n $ sex  : chr  \"m\" \"m\" \"m\" \"f\" ...\n $ age  : num  99 46 23 54 23\n```\n\n\n:::\n:::\n\n\n\n\nTo access a specific column in a dataframe by name, you use the `$` operator in the form `df$name` where `df` is the name of the dataframe, and name is the name of the column you are interested in. This operation will then return the column you want as a vector.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsurvey$sex\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"m\" \"m\" \"m\" \"f\" \"f\"\n```\n\n\n:::\n:::\n\n\n\n\nBecause the `$` operator returns a vector, you can easily calculate descriptive statistics on columns of a dataframe by applying your favorite vector function (like `mean()`). \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(survey$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 49\n```\n\n\n:::\n:::\n\n\n\n\nWe can also use the `$` to add new vectors to a dataframe\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsurvey$follow_up <- c(T,F,T,F,F)\nsurvey\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| index|sex | age|follow_up |\n|-----:|:---|---:|:---------|\n|     1|m   |  99|TRUE      |\n|     2|m   |  46|FALSE     |\n|     3|m   |  23|TRUE      |\n|     4|f   |  54|FALSE     |\n|     5|f   |  23|FALSE     |\n\n</div>\n:::\n:::\n\n\n\n\nChanging column names is easy with a combination of `names()` and indexing\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnames(survey)[1] <- \"ID\"\n\nsurvey\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| ID|sex | age|follow_up |\n|--:|:---|---:|:---------|\n|  1|m   |  99|TRUE      |\n|  2|m   |  46|FALSE     |\n|  3|m   |  23|TRUE      |\n|  4|f   |  54|FALSE     |\n|  5|f   |  23|FALSE     |\n\n</div>\n:::\n:::\n\n\n\n\n### Slice dataframes\n\nMatrices and dataframes can be sliced with `[,]`\n\n```\n# Return row 1\ndf[1, ]\n\n\n# Return column 5 as vector\ndf[, 5]\n\n# Return column as data.frame\ndf[5]\n\n# Rows 1:5 and column 2\ndf[1:5, 2]\n\n# Single element\ndf[[1,2]]\n\n```\n\nOr slice with `subset`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsurvey_slice <- subset(x = survey,\n      subset = age < 50 &\n               sex == \"m\")\n\nsurvey_slice\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   | ID|sex | age|follow_up |\n|:--|--:|:---|---:|:---------|\n|2  |  2|m   |  46|FALSE     |\n|3  |  3|m   |  23|TRUE      |\n\n</div>\n:::\n:::\n\n\n\n\n### Tibbles\n\n“Tibbles” are a new modern data frame. It keeps many important features of the original data frame\n\n- A tibble never changes the input type.\n\n- A tibble can have columns that are lists.\n\n- A tibble can have non-standard variable names.\n    - can start with a number or contain spaces.\n    -to use this refer to these in a backtick.\n    \n- Tibbles only print the first 10 rows and all the columns that fit on a screen. - Each column displays its data type\n\nThe way we make tibbles is very similar to making dataframes\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsurvey_tibble <- tibble(\"index\" = c(1, 2, 3, 4, 5),\n                     \"sex\" = c(\"m\", \"m\", \"m\", \"f\", \"f\"),\n                     \"age\" = c(99, 46, 23, 54, 23))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Some R functions for looking at tibbles and dataframes\n\nhead(survey_tibble, n=2)\ntail(survey_tibble, n=1)\nnrow(survey_tibble)\nncol(survey_tibble)\ncolnames(survey_tibble)\nview(survey_tibble)\nglimpse(survey_tibble)\nstr(survey_tibble)\n```\n:::\n\n\n\n\n### Brackets with tibbles\n\nThe behaviour of single [] indexing with tibbles is slightly different. \n\nIn a dataframe [,1] extracts a single column as a vector, but with a tibble this conversion does not occur. Instead it returns as a tibble with a single column, not a vector.\n\nTo extract a vector we must use:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# pull function\npull(survey_tibble, sex)\n\n# double brackets\nsurvey_tibble[[2]]\n```\n:::\n\n\n\n\nhttps://tibble.tidyverse.org/\n\nhttps://cran.r-project.org/web/packages/tibble/vignettes/tibble.html\n\n\n## Matrix, dataframe, tibble functions\n\nImportant functions for understanding matrices and dataframes.\n\n| Function                           | Description                                                |\n| ---------------------------------- | ---------------------------------------------------------- |\n| `head(x), tail(x)`                 | Print the first few rows (or last few rows).              |\n| `View(x)`                          | Open the entire object in a new window.                   |\n| `nrow(x), ncol(x), dim(x)`         | Count the number of rows and columns.                     |\n| `rownames(), colnames(), names()`  | Show the row (or column) names.                            |\n| `str(x), summary(x)`               | Show the structure of the dataframe (i.e., dimensions and classes) and summary statistics. |\n\n\n\n## Functions\n\nFunctions are the tools of R. Each one helps us to do a different task.\n\nTake for example the function that we use to round a number to a certain number of digits - this function is called `round`\n\nHere's an example:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nround(x  = 2.4326782647, digits = 2)\n```\n:::\n\n\n\n\nWe start the command with the function name `round`. The name is followed by parentheses `()`. Within these we place the *arguments* for the function, each of which is separated by a comma.\n\nThe arguments:\n\n-   `x =` 2.4326782647 (the number we would like to round)\n\n-   `digits =` 2 (the number of decimal places we would like to round to)\n\n**Arguments are the inputs we give to a function**. These arguments are in the form `name = value` the name specifies the argument, and the value is what we are providing to define the input. That is the first argument `x` is the number we would like to round, it has a value of 2.4326782647. The second argument `digits` is how we would like the number to be rounded and we specify 2. There is no limit to how many arguments a function *could* have.\n\n\n\n\n\n::: {.cell layout-align=\"center\" type='try'}\n<div class=\"try\">\n<p>Copy and paste the following code into the console.</p>\n</div>\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhelp(round)\n```\n:::\n\n\n\n\nThe help documentation for `round()`should appear in the bottom right help panel. In the usage section, we see that `round()`takes the following form:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nround(x, digits = 0)\n```\n:::\n\n\n\n\nIn the arguments section, there are explanations for each of the arguments. `x`is the number or vector where we wish to round values. `digits` is the number of decimal places to be used. In the description we can see that if no value is supplied for `digits` it will default to 0 or whole number rounding.\n\nRead the 'Details' section to find out what happens when rounding when the last digit is a 5.\n\nLet's try an example and just change the required argument `digits`\n\n\n\n\n::: {.cell layout-align=\"center\" type='try'}\n<div class=\"try\">\n<p>Copy and paste the following code into the console.</p>\n</div>\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nround(x  = 2.4326782647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\nNow we can change the additional arguments to produce a different set of numbers.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nround(x  = 2.4326782647, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.43\n```\n\n\n:::\n:::\n\n\n\n\nThis time R has still rounded the number, but it has done so to a set number of 'decimal places'.\n\nAlways remember to use the help documentation to help you understand what arguments a function requires.\n\n### Storing the output of functions\n\nWhat if we need the answer from a function in a later calculation. The answer is to use the assignment operator again `<-`.\n\nIn this example we assign values to two R objects that we can then call inside our R function **as though we were putting numbers in directly**.\n\n\n\n\n::: {.cell layout-align=\"center\" type='try'}\n<div class=\"try\">\n<p>Copy and paste the following code into the console.</p>\n</div>\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnumber_of_digits <- 3\n\nmy_number <- 2.4326782647\n\nrounded_number <- round(x  = my_number, \n                        digits = number_of_digits)\n```\n:::\n\n\n\n\n**What value is assigned to the R object `rounded_number`** **?**\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n[1] 2.433\n:::\n\n\n\n\n\n</div>\n\n\n### More fun with functions\n\nCopy and paste this:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nround(2.4326782647, 2)\n```\n:::\n\n\n\n\nLooks like we don't even *have* to give the names of arguments for a function to still work. This works because the function `round` expects us to give the number value first, and the argument for rounding digits second. *But* this assumes we know the expected ordering within a function, this might be the case for functions we use a lot. If you give arguments their proper names *then* you can actually introduce them in **any order you want**.\n\nTry this:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nround(digits = 2, x  = 2.4326782647)\n```\n:::\n\n\n\n\nBut this gives a different answer\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nround(2, 2.4326782647)\n```\n:::\n\n::: {.cell layout-align=\"center\" type='warning'}\n<div class=\"warning\">\n<p>Remember naming arguments overrides the position defaults</p>\n</div>\n:::\n\n\n\n\nHow do we **know** the argument orders and defaults? Well we get to know how a lot of functions work through practice, but we can also use `help()` .\n\n## Packages\n\nWhen you install R you will have access to a range of functions including options for data wrangling and statistical analysis. The functions that are included in the default installation are typically referred to as **Base R** and there is a useful cheat sheet that shows many Base R functions [here](%5Bhttps://www.rstudio.com/wp-content/uploads/2016/05/base-r.pdf)\n\nHowever, the power of R is that it is extendable and open source - anyone can create a new **package** that extends the functions of R.\n\nAn R package is a container for various things including functions and data. These make it easy to do very complicated protocols by using custom-built functions. Later we will see how we can write our own simple functions. Packages are a lot like new apps extending the functionality of what your phone can do.\n\n\n### Loading packages\n\nTo use the functions from a package in our script they must be loaded *before* we call on the functions or data they contain. So the most sensible place to put library calls for packages is at the very **top** of our script.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(package_name)\n```\n:::\n\n\n\n\n### Calling Functions from Packages\n\nAfter loading a package, you can call its functions using either `function()` or the full `package_name::function_name()` syntax. This allows you to specify the package explicitly when using a particular function.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nfilter(dataframe, condition)\n\ndplyr::filter(dataframe, conditions)\n```\n:::\n\n\n\n\nCalling a function explicitly via its package can be useful for \n\n1. Avoiding Conflicts:\n\nSometimes, multiple packages may have functions with the same name. By explicitly specifying the package with package_name::, you avoid naming conflicts and ensure that R uses the function from the intended package.\n\n2. Clarity:\n\nIt can make your code more transparent and easier to understand, especially in cases where the function's origin is not immediately obvious. This is helpful for both yourself and others who read your code.\n\n>Though it is still good practice to comment at the top of your script that this package is required even if you don't include library(package)\n\n\n3. Debugging:\n\nWhen troubleshooting issues or debugging code, specifying the package source of a function can help pinpoint problems and ensure that the correct function is being used.\n\n## Error\n\nThings will go wrong eventually, they always do...\n\nR is *very* pedantic, even the smallest typo can result in failure and typos are impossilbe to avoid. So we will make mistakes. One type of mistake we will make is an **error**. The code fails to run. The most common causes for an error are:\n\n-   typos\n\n-   missing commas\n\n-   missing brackets\n\nThere's nothing wrong with making *lots* of errors. The trick is not to panic or get frustrated, but to read the error message and our script carefully and start to *debug* (more on this later)...\n\n... and sometimes we need to walk away and come back later!\n\n\n\n\n::: {.cell layout-align=\"center\" type='try'}\n<div class=\"try\">\n<p>Try typing the command <code>help()</code> into the R console, it\nshould open a new tab on the bottom right.</p>\n<p>Put a function or package into the brackets to get help with a\nspecific topic</p>\n</div>\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![courtesy of Allison Horst](images/Error.jpg){fig-align='center' fig-alt='R Error' width=80%}\n:::\n:::\n\n\n\n\n\n\nTo load packages we use the function `library()`. Typically you would start any analysis script by loading all of the packages you need. \n\nThe [tidyverse](https://www.tidyverse.org/) is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. This means the functions across the tidyverse are all designed to work together and make the process of data science easier.\n\n## Using packages\n\nRun the below code to load the tidyverse package. You can do this regardless of whether you are using your own computer or the cloud.  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nYou will get what looks like an error message - it's not. It's just R telling you what it's done. You should **read this** it gives you a full list of the packages it has made available to you.\n\nNow that we've loaded the `tidyverse` package we can use **any** of the functions it contains but remember, you need to run the `library()` function every time you start R.\n\n\n<div class='webex-solution'><button>Install the tidyverse. You DO NOT need to do this on RStudio Cloud.</button>\n\n\nIn order to use a package, you must first install it. The following code installs the package tidyverse, a package we will use very frequently.\n\nIf you are working on your own computer, use the below code to install the tidyverse.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n\n\n\nYou only need to install a package once, however, each time you start R you need to load the packages you want to use, in a similar way that you need to install an app on your phone once, but you need to open it every time you want to use it.\n\n\n</div>\n \n<br>\n\n\n\n\n::: {.cell layout-align=\"center\" type='danger'}\n<div class=\"danger\">\n<p>If you get an error message that says something like “WARNING: Rtools\nis required to build R packages” you may need to download and install an\nextra bit of software called <a\nhref=\"https://cran.r-project.org/bin/windows/Rtools/\">Rtools</a>.</p>\n</div>\n:::\n\n\n\n\n## Package updates\n\nIn addition to updates to R and R Studio, the creators of packages also sometimes update their code. This can be to add functions to a package, or it can be to fix errors. One thing to avoid is unintentionally updating an installed package. When you run `install.packages()` it will always install the latest version of the package and it will overwrite any older versions you may have installed. Sometimes this isn't a problem, however, sometimes you will find that the update means your code no longer works as the package has changed substantially. It is possible to revert back to an older version of a package but try to avoid this anyway.\n\n\n\n\n::: {.cell layout-align=\"center\" type='danger'}\n<div class=\"danger\">\n<p>To avoid accidentally overwriting a package with a later version, you\nshould <strong>never</strong> include <code>install.packages()</code> in\nyour analysis scripts in case you, or someone else runs the code by\nmistake. Remember, the server will already have all of the packages you\nneed for this course so you only need to install packages if you are\nusing your own machine.</p>\n</div>\n:::\n\n\n\n\n## Package conflicts\n\nThere are thousands of different R packages with even more functions. Unfortunately, sometimes different packages have the same function names. For example, the packages `dplyr` and `MASS` both have a function named `select()`. If you load both of these packages, R will produce a warning telling you that there is a conflict.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(MASS)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'MASS'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked _by_ '.GlobalEnv':\n\n    survey\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n\n\n:::\n:::\n\n\n\n```\npackage �dplyr� was built under R version 3.6.3\nAttaching package: �dplyr�\n\nThe following objects are masked from �package:stats�:\n\n    filter, lag\n\nThe following objects are masked from �package:base�:\n\n    intersect, setdiff, setequal, union\n\n\nAttaching package: �MASS�\n\nThe following object is masked from �package:dplyr�:\n\n    select\n```\n\nIn this case, R is telling you that the function `select()` in the `dplyr` package is being hidden (or 'masked') by another function with the same name. If you were to try and use `select()`, R would use the function from the package that was loaded most recently - in this case it would use the function from `MASS`.\n\nIf you want to specify which package you want to use for a particular function you can use code in the format `package::function`, for example:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndplyr::select()\nMASS::select()\n```\n:::\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>Why do we get naming conflicts?</p>\n<p>This is because R is open source software. Anyone can write and\nsubmit useful R packages. As a result it is impossible to make sure that\nthere are NEVER any functions with identical names.</p>\n</div>\n:::\n\n\n\n\n## Objects\n\nA large part of your coding will involve creating and manipulating objects. Objects contain stuff, and we made our first R objects in the previous chapter. The values contained in an object can be numbers, words, or the result of operations and analyses.You assign content to an object using `<-`.\n\n### Activity 1: Create some objects\n\nCopy and paste the following code into the console, change the code so that it uses your own name and age and run it. You should see that `name`, `age`, `today`, `new_year`, and `data` appear in the environment pane.  \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nname <- \"emily\"\nage <- 16 + 19 \ntoday <- Sys.Date()\nnew_year <- as.Date(\"2022-01-01\")\ndata <- rnorm(n = 10, mean = 15, sd = 3)\n```\n:::\n\n\n\n\nWhat command should we use if you need `help` to understand the function `rnorm()`?\n\n<input class='webex-solveme nospaces' size='11' data-answer='[\"help(rnorm)\"]'/>\n\n`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Objects in the environment](images/objects-enviro.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nNote that in these examples, `name`,`age`, and `new_year` would always contain the values `emily`, `35`, and the date of New Year's Day 2021, however, `today` will draw the date from the operating system and `data` will be a randomly generated set of data so the values of these objects will not be static.\n\nAs a side note, if you ever have to teach programming and statistics, don't use your age as an example because every time you have to update your teaching materials you get a reminder of the fragility of existence and your advancing age. 2021 update: I have now given up updating my age, I will remain forever 35. \n\nImportantly, objects can be involved in calculations and can interact with each other. For example:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nage + 10\nnew_year - today\nmean(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 45\nTime difference of -999 days\n[1] 15.31317\n```\n\n\n:::\n:::\n\n\n\n\nFinally, you can store the result of these operations in a new object:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndecade <- age + 10\n```\n:::\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>You may find it helpful to read <code>&lt;-</code> as\n<code>contains</code>, e.g., <code>name</code> contains the text\n<code>emily</code>.</p>\n</div>\n:::\n\n\n\n\nYou will constantly be creating objects throughout this course and you will learn more about them and how they behave as we go along, however, for now it is enough to understand that they are a way of saving values, that these values can be numbers, text, or the result of operations, and that they can be used in further operations to create new variables.\n\n\n\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>You may also see objects referred to as ‘variables’. There is a\ndifference between the two in programming terms, however, they are used\nsynonymously very frequently.</p>\n</div>\n:::\n\n\n\n\n## Vectors\n\nWe have been working with R objects containing a single element of data, but we will more commonly work with vectors. A vector is a *sequence* of elements, **all of the same data type**. These could be logical, numerical, character etc.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnumeric_vector <- c(1,2,3)\n\ncharacter_vector <- c(\"fruits\", \"vegetables\", \"seeds\")\n\nlogical_vector <- c(TRUE, TRUE, FALSE)\n```\n:::\n\n\n\n\nThe function `c` lets you 'concatenate' or link each of these separate elements together into a single vector.\n\n## Dataframes and tibbles\n\nNo we have looked at R objects that contain:\n\n* single elements of data\n\n* multiple elements of the same data type - vectors\n\n\nBut most often when we import data into R it is put into an object called a **tibble** which is a type of **dataframe**. \n\n\n\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>A dataframe is data structure that organises data into a table.\nDataframes can have a mix of different types of data in them. Each\ncolumn in a dataframe is a different vector, and each row is a different\nelement within the vectors.</p>\n</div>\n:::\n\n\n\n\nLet's have a quick go at making our own **tibble** from scratch. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# make some variables/ vectors\nperson <- c(\"Mark\", \"Phil\", \"Becky\", \"Tony\")\n\nhobby <- c(\"kickboxing\", \"coding\", \"dog walking\", \"car boot sales\")\n\nawesomeness <- c(1,100,1,1)\n```\n:::\n\n::: {.cell layout-align=\"center\" type='try'}\n<div class=\"try\">\n<p>Use <code>str()</code> on an object or vector to find out important\ninformation, like the data type of each vector and how many elements it\ncontains.</p>\n</div>\n:::\n\n\n\n\nNow we put these vectors together, where they become the variables in a new tibble using the function `tibble()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# make a tibble\nmy_data <- tibble(person, hobby, awesomeness)\nmy_data\n```\n:::\n\n\n\n\n```\n# A tibble: 4 x 3\n  person hobby          awesomeness\n  <chr>  <chr>                <dbl>\n1 Mark   kickboxing               1\n2 Phil   coding                 100\n3 Becky  dog walking              1\n4 Tony   car boot sales           1\n```\nHave a go at messing about with your script and figure out what each of the functions below does. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Some R functions for looking at tibbles and dataframes\n\nhead(my_data, n=2)\ntail(my_data, n=1)\nnrow(my_data)\nncol(my_data)\ncolnames(my_data)\nview(my_data)\nglimpse(my_data)\nstr(my_data)\n```\n:::\n\n\n\n\n\n## Organising data in wide and long formats\n\nThere are two main conventions for dataframes in R, these are *wide* and *long* formats. \n\n* A wide data format does not repeat values in the first column, data relating to the same \"measured thing\" are found in different columns\n\n* A long data format is where we have a **different** column for each type of thing we have measures in our data. Each *variable* has a unique column. \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A visual representation of long and wide format data shapes](images/data_shapes.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nWhile neither *wide* or *long* data is more correct than the other, we will work with *long* data as it is clearer how many distinct types of variables there are in our data *and* the tools we will be using from the `tidyverse` are designed to work with *long* data.\n\n\n## How to cite R and RStudio\n\nYou may be some way off writing a scientific report where you have to cite and reference R, however, when the time comes it is important to do so to the people who built it (most of them for free!) credit. You should provide separate citations for R, RStudio, and the packages you use.\n\nTo get the citation for the version of R you are using, simply run the `citation()` function which will always provide you with he most recent citation.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncitation()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTo cite R in publications use:\n\n  R Core Team (2024). _R: A Language and Environment for Statistical\n  Computing_. R Foundation for Statistical Computing, Vienna, Austria.\n  <https://www.R-project.org/>.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {R: A Language and Environment for Statistical Computing},\n    author = {{R Core Team}},\n    organization = {R Foundation for Statistical Computing},\n    address = {Vienna, Austria},\n    year = {2024},\n    url = {https://www.R-project.org/},\n  }\n\nWe have invested a lot of time and effort in creating R, please cite it\nwhen using it for data analysis. See also 'citation(\"pkgname\")' for\nciting R packages.\n```\n\n\n:::\n:::\n\n\n\n\nTo generate the citation for any packages you are using, you can also use the `citation()` function with the name of the package you wish to cite.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncitation(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTo cite package 'tidyverse' in publications use:\n\n  Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R,\n  Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller\n  E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V,\n  Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). \"Welcome to\n  the tidyverse.\" _Journal of Open Source Software_, *4*(43), 1686.\n  doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {Welcome to the {tidyverse}},\n    author = {Hadley Wickham and Mara Averick and Jennifer Bryan and Winston Chang and Lucy D'Agostino McGowan and Romain François and Garrett Grolemund and Alex Hayes and Lionel Henry and Jim Hester and Max Kuhn and Thomas Lin Pedersen and Evan Miller and Stephan Milton Bache and Kirill Müller and Jeroen Ooms and David Robinson and Dana Paige Seidel and Vitalie Spinu and Kohske Takahashi and Davis Vaughan and Claus Wilke and Kara Woo and Hiroaki Yutani},\n    year = {2019},\n    journal = {Journal of Open Source Software},\n    volume = {4},\n    number = {43},\n    pages = {1686},\n    doi = {10.21105/joss.01686},\n  }\n```\n\n\n:::\n:::\n\n\n\n\nTo generate the citation for the version of RStudio you are using, you can use the `RStudio.Version()` function:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nRStudio.Version()\n```\n:::\n\n\n\n\nFinally, here's an example of how that might look in the write-up of your method section:\n\n> Analysis was conducted using R ver 4.0.0 (R Core Team, 2020), RStudio (Rstudio Team, 2020), and the tidyverse range of packages (Wickham, 2017).\n\nAs noted, you may not have to do this for a while, but come back to this when you do as it's important to give the open-source community credit for their work.\n\n## Help and additional resources\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The truth about programming](images/kitteh.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nGetting good at programming really means getting good trying stuff out,  searching for help online, and finding examples of code to copy. If you are having difficulty with any of the exercises contained in this book then you can ask for help on Teams, however, learning to problem-solve effectively is a key skill that you need to develop throughout this course. \n\n* Use the help documentation. If you're struggling to understand how a function works, remember the `?function` and `help()` command.\n\n* If you get an error message, copy and paste it in to Google - it's very likely someone else has had the same problem.\n\n* If you are struggling to produce a particular output or process - try organising your google searches to include key terms such as \"in R\" or \"tidyverse\". - e.g. *\"how to change character strings into NA values with tidyverse\"*\n\n*  The official [Cheatsheets](https://posit.co/resources/cheatsheets/) are a great resource to keep bookmarked. \n\n* **Remember to ask for help** \n\n* In addition to these course materials there are a number of excellent resources for learning R:\n  * [StackOverflow](https://stackoverflow.com/)\n  * [R for Data Science](https://r4ds.had.co.nz/)\n  * Search or use the [#rstats](https://twitter.com/search?f=tweets&q=%23rstats&src=typd) hashtag on Twitter\n\n\n## Debugging tips\n\nA large part of coding is trying to figure why your code doesn't work and this is true whether you are a novice or an expert. As you progress through this course  you should keep a record of mistakes you make and how you fixed them. In each chapter we will provide a number of common mistakes to look out for but you will undoubtedly make (and fix!) new mistakes yourself.\n\n### Prevent errors\n\n**Read console outputs as you go**\n\n**Check that functions are producing the output you expect**\n\n**Build complex code in simple stages**\n\n### Fix errors\n\n* Have you loaded the correct packages for the functions you are trying to use? One very common mistake is to write the code to load the package, e.g., `library(tidyverse)` but then forget to run it.\n\n* Have you made a typo? Remember `data` is not the same as `DATA` and `t.test` is not the same as `t_test`.\n\n* Is there a package conflict? Have you tried specifying the package and function with `package::function`?\n\n* Is it definitely an error? Not all red text in R means an error - sometimes it is just giving you a message with information. \n\n## Activity 7: Test yourself\n\n**Question 1.** Why should you never include the code `install.packages()` in your analysis scripts? <select class='webex-select'><option value='blank'></option><option value=''>You should use library() instead</option><option value=''>Packages are already part of Base R</option><option value='answer'>You (or someone else) may accidentally install a package update that stops your code working</option><option value=''>You already have the latest version of the package</option></select> \n\n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n\n\n::: {.cell layout-align=\"center\"}\nRemember, when you run `install.packages()` it will always install the latest version of the package and it will overwrite any older versions of the package you may have installed.\n:::\n\n\n\n\n</div>\n \n<br>\n**Question 2.** What will the following code produce?\n  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrnorm(6, 50, 10)\n```\n:::\n\n\n\n\n<select class='webex-select'><option value='blank'></option><option value=''>A dataset with 10 numbers that has a mean of 6 and an SD of 50</option><option value='answer'>A dataset with 6 numbers that has a mean of 50 and an SD of 10</option><option value=''>A dataset with 50 numbers that has a mean of 10 and an SD of 6</option><option value=''>A dataset with 50 numbers that has a mean of 10 and an SD of 6</option></select>  \n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n\n\n::: {.cell layout-align=\"center\"}\nThe default form for `rnorm()` is `rnorm(n, mean, sd)`. If you need help remembering what each argument of a function does, look up the help documentation by running `?rnorm`\n:::\n\n\n\n\n</div>\n  \n<br>\n**Question 3.** If you have two packages that have functions with the same name and you want to specify exactly which package to use, what code would you use? \n\n<select class='webex-select'><option value='blank'></option><option value='answer'>package::function</option><option value=''>function::package</option><option value=''>library(package)</option><option value=''>install.packages(package)</option></select>  \n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n\n\n::: {.cell layout-align=\"center\"}\nYou should use the form `package::function`, for example `dplyr::select`. Remember that when you first load your packages R will warn you if any functions have the same name - remember to look out for this!\n:::\n\n\n\n\n</div>\n  \n\n**Question 4.** Which of the following is most likely to be an argument? <select class='webex-select'><option value='blank'></option><option value=''><-</option><option value=''>read_csv()</option><option value='answer'>35</option></select>\n\n**Question 5.** An easy way to spot functions is to look for <select class='webex-select'><option value='blank'></option><option value=''>numbers</option><option value=''>computers</option><option value='answer'>brackets</option></select>.\n\n**Question 6.** The job of `<-` is to send the output from the function to a/an <select class='webex-select'><option value='blank'></option><option value=''>argument</option><option value='answer'>object</option><option value=''>assignment</option></select>.\n\n**Question 7.** A vector must always contain elements of the same data type (e.g logical, character, numeric) <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>.\n\n**Question 8.** A dataframe/tibble must always contain elements of the same data t\n",
    "supporting": [
      "r-basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}